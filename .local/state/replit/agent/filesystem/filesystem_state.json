{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# QuoteMaster Pro\n\n## Overview\n\nQuoteMaster Pro is a comprehensive SaaS application for professional quote management. Built as a full-stack TypeScript application, it enables businesses to create, manage, and track quotes with multiple professional templates. The system includes subscription management through Stripe, user authentication via Replit Auth, and a complete administrative interface.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables\n- **State Management**: TanStack Query for server state and local React state for UI\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with typed request/response interfaces\n- **Authentication**: Replit Auth with OpenID Connect integration\n- **Session Management**: Express sessions with PostgreSQL storage\n- **File Organization**: Modular structure with separate route handlers and storage abstraction\n\n### Data Layer\n- **Database**: PostgreSQL with Neon serverless driver\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema**: Centralized schema definitions in shared module\n- **Migrations**: Drizzle Kit for database schema management\n- **Connection**: Connection pooling with environment-based configuration\n\n### Authentication & Authorization\n- **Provider**: Replit Auth using OpenID Connect\n- **Session Storage**: Server-side sessions in PostgreSQL\n- **User Management**: Role-based access control (user, admin, banned, deleted)\n- **Security**: HTTP-only cookies with secure session handling\n\n### Payment Integration\n- **Provider**: Stripe for subscription management\n- **Implementation**: Stripe Elements for secure payment processing\n- **Webhooks**: Server-side webhook handling for subscription events\n- **Models**: Subscription status tracking and customer management\n\n### File Storage & Assets\n- **Static Assets**: Vite-managed client assets with optimized bundling\n- **Uploads**: Google Cloud Storage integration for company logos\n- **PDF Generation**: Client-side PDF generation with multiple template variants\n\n### Development Environment\n- **Build System**: Vite for frontend with hot module replacement\n- **Development Server**: Express with Vite middleware integration\n- **Type Safety**: Shared TypeScript types between client and server\n- **Code Quality**: ESLint and TypeScript strict mode enabled\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database**: Serverless PostgreSQL database hosting\n- **Replit Auth**: OpenID Connect authentication provider\n- **Stripe**: Payment processing and subscription management\n- **Google Cloud Storage**: File upload and storage service\n\n### Frontend Libraries\n- **React Ecosystem**: React, React DOM, React Hook Form\n- **UI Components**: Radix UI primitives, Lucide React icons\n- **Styling**: Tailwind CSS, class-variance-authority for component variants\n- **Data Fetching**: TanStack Query for server state management\n- **Routing**: Wouter for client-side routing\n- **Date Handling**: date-fns with Portuguese locale support\n\n### Backend Dependencies\n- **Express.js**: Web framework with CORS and middleware support\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL driver\n- **Authentication**: OpenID Client, Passport.js for auth strategies\n- **Session Management**: Express Session with PostgreSQL store\n- **Payment Processing**: Stripe SDK for server-side operations\n- **Development Tools**: tsx for TypeScript execution, esbuild for production builds\n\n### Development Tools\n- **Build Tools**: Vite, esbuild, TypeScript compiler\n- **Validation**: Zod for runtime type validation\n- **Testing**: Built-in Replit development environment\n- **Utilities**: nanoid for ID generation, memoizee for caching","size_bytes":4174},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertCompanySchema, insertQuoteDraftSchema, insertQuoteItemSchema } from \"@shared/schema\";\nimport Stripe from \"stripe\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-08-27.basil\",\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Company routes\n  app.get('/api/companies/me', isAuthenticated, async (req: any, res) => {\n    try {\n      const userEmail = req.user.claims.email;\n      const company = await storage.getCompanyByUser(userEmail);\n      res.json(company);\n    } catch (error) {\n      console.error(\"Error fetching company:\", error);\n      res.status(500).json({ message: \"Failed to fetch company\" });\n    }\n  });\n\n  app.post('/api/companies', isAuthenticated, async (req: any, res) => {\n    try {\n      const userEmail = req.user.claims.email;\n      const companyData = insertCompanySchema.parse({\n        ...req.body,\n        createdBy: userEmail,\n      });\n      \n      const company = await storage.createCompany(companyData);\n      res.json(company);\n    } catch (error) {\n      console.error(\"Error creating company:\", error);\n      res.status(500).json({ message: \"Failed to create company\" });\n    }\n  });\n\n  app.put('/api/companies/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      delete updateData.id;\n      delete updateData.createdBy;\n      delete updateData.createdAt;\n      \n      const company = await storage.updateCompany(id, updateData);\n      res.json(company);\n    } catch (error) {\n      console.error(\"Error updating company:\", error);\n      res.status(500).json({ message: \"Failed to update company\" });\n    }\n  });\n\n  // Quote routes\n  app.get('/api/quotes', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      const userEmail = user?.role === 'admin' ? undefined : req.user.claims.email;\n      const quotes = await storage.listQuoteDrafts(userEmail);\n      res.json(quotes);\n    } catch (error) {\n      console.error(\"Error fetching quotes:\", error);\n      res.status(500).json({ message: \"Failed to fetch quotes\" });\n    }\n  });\n\n  app.get('/api/quotes/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const quote = await storage.getQuoteDraft(id);\n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n      \n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && quote.createdBy !== req.user.claims.email) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const items = await storage.getQuoteItems(id);\n      res.json({ ...quote, items });\n    } catch (error) {\n      console.error(\"Error fetching quote:\", error);\n      res.status(500).json({ message: \"Failed to fetch quote\" });\n    }\n  });\n\n  app.post('/api/quotes', isAuthenticated, async (req: any, res) => {\n    try {\n      const userEmail = req.user.claims.email;\n      const company = await storage.getCompanyByUser(userEmail);\n      \n      if (!company) {\n        return res.status(400).json({ message: \"Company not found. Please create a company first.\" });\n      }\n\n      const code = await storage.generateQuoteCode();\n      \n      const quoteData = insertQuoteDraftSchema.parse({\n        ...req.body,\n        code,\n        companyId: company.id,\n        createdBy: userEmail,\n      });\n      \n      const quote = await storage.createQuoteDraft(quoteData);\n      res.json(quote);\n    } catch (error) {\n      console.error(\"Error creating quote:\", error);\n      res.status(500).json({ message: \"Failed to create quote\" });\n    }\n  });\n\n  app.put('/api/quotes/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const quote = await storage.getQuoteDraft(id);\n      \n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n      \n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && quote.createdBy !== req.user.claims.email) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updateData = req.body;\n      delete updateData.id;\n      delete updateData.code;\n      delete updateData.createdBy;\n      delete updateData.companyId;\n      delete updateData.createdAt;\n      \n      const updatedQuote = await storage.updateQuoteDraft(id, updateData);\n      res.json(updatedQuote);\n    } catch (error) {\n      console.error(\"Error updating quote:\", error);\n      res.status(500).json({ message: \"Failed to update quote\" });\n    }\n  });\n\n  app.delete('/api/quotes/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const quote = await storage.getQuoteDraft(id);\n      \n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n      \n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && quote.createdBy !== req.user.claims.email) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.deleteQuoteDraft(id);\n      res.json({ message: \"Quote deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting quote:\", error);\n      res.status(500).json({ message: \"Failed to delete quote\" });\n    }\n  });\n\n  // Quote items routes\n  app.post('/api/quotes/:quoteId/items', isAuthenticated, async (req: any, res) => {\n    try {\n      const { quoteId } = req.params;\n      const quote = await storage.getQuoteDraft(quoteId);\n      \n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n      \n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && quote.createdBy !== req.user.claims.email) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const itemData = insertQuoteItemSchema.parse({\n        ...req.body,\n        quoteDraftId: quoteId,\n      });\n      \n      const item = await storage.createQuoteItem(itemData);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error creating quote item:\", error);\n      res.status(500).json({ message: \"Failed to create quote item\" });\n    }\n  });\n\n  app.get('/api/quotes/:quoteId/items', isAuthenticated, async (req: any, res) => {\n    try {\n      const { quoteId } = req.params;\n      const quote = await storage.getQuoteDraft(quoteId);\n      \n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n      \n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && quote.createdBy !== req.user.claims.email) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const items = await storage.getQuoteItems(quoteId);\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching quote items:\", error);\n      res.status(500).json({ message: \"Failed to fetch quote items\" });\n    }\n  });\n\n  app.put('/api/quotes/:quoteId/items/:itemId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { quoteId, itemId } = req.params;\n      const quote = await storage.getQuoteDraft(quoteId);\n      \n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n      \n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && quote.createdBy !== req.user.claims.email) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updateData = req.body;\n      delete updateData.id;\n      delete updateData.quoteDraftId;\n      delete updateData.createdAt;\n      \n      const item = await storage.updateQuoteItem(itemId, updateData);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error updating quote item:\", error);\n      res.status(500).json({ message: \"Failed to update quote item\" });\n    }\n  });\n\n  app.delete('/api/quotes/:quoteId/items/:itemId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { quoteId, itemId } = req.params;\n      const quote = await storage.getQuoteDraft(quoteId);\n      \n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n      \n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && quote.createdBy !== req.user.claims.email) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.deleteQuoteItem(itemId);\n      res.json({ message: \"Quote item deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting quote item:\", error);\n      res.status(500).json({ message: \"Failed to delete quote item\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const users = await storage.listUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get('/api/admin/companies', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const companies = await storage.listCompanies();\n      res.json(companies);\n    } catch (error) {\n      console.error(\"Error fetching companies:\", error);\n      res.status(500).json({ message: \"Failed to fetch companies\" });\n    }\n  });\n\n  app.put('/api/admin/users/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const adminUser = await storage.getUser(req.user.claims.sub);\n      if (adminUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const { id } = req.params;\n      const updateData = req.body;\n      delete updateData.id;\n      delete updateData.createdAt;\n      delete updateData.updatedAt;\n      \n      const user = await storage.updateUser(id, updateData);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Stripe subscription routes\n  app.post('/api/get-or-create-subscription', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const userEmail = req.user.claims.email;\n      let user = await storage.getUser(userId);\n\n      if (!user || !userEmail) {\n        return res.status(400).json({ error: \"User not found\" });\n      }\n\n      if (user.stripeSubscriptionId) {\n        const subscription = await stripe.subscriptions.retrieve(user.stripeSubscriptionId);\n        const invoice = await stripe.invoices.retrieve(subscription.latest_invoice as string, {\n          expand: ['payment_intent']\n        });\n\n        return res.json({\n          subscriptionId: subscription.id,\n          clientSecret: (invoice as any).payment_intent?.client_secret || null,\n        });\n      }\n\n      try {\n        const customer = await stripe.customers.create({\n          email: userEmail,\n          name: `${user.firstName || ''} ${user.lastName || ''}`.trim() || userEmail,\n        });\n\n        user = await storage.updateUserStripeInfo(userId, customer.id);\n\n        const subscription = await stripe.subscriptions.create({\n          customer: customer.id,\n          items: [{\n            price: process.env.STRIPE_PRICE_ID || 'price_1234567890',\n          }],\n          payment_behavior: 'default_incomplete',\n          expand: ['latest_invoice.payment_intent'],\n        });\n\n        await storage.updateUserStripeInfo(userId, customer.id, subscription.id);\n\n        const invoice = subscription.latest_invoice as any;\n        return res.json({\n          subscriptionId: subscription.id,\n          clientSecret: invoice.payment_intent?.client_secret,\n        });\n      } catch (error: any) {\n        console.error(\"Stripe error:\", error);\n        return res.status(400).json({ error: error.message });\n      }\n    } catch (error: any) {\n      console.error(\"Subscription error:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post('/api/create-customer-portal', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      if (!user?.stripeCustomerId) {\n        return res.status(400).json({ error: \"No customer found\" });\n      }\n\n      const portalSession = await stripe.billingPortal.sessions.create({\n        customer: user.stripeCustomerId,\n        return_url: `${req.protocol}://${req.get('host')}/subscription`,\n      });\n\n      res.json({ portal_url: portalSession.url });\n    } catch (error: any) {\n      console.error(\"Portal error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14106},"server/storage.ts":{"content":"import {\n  users,\n  companies,\n  quoteDrafts,\n  quoteItems,\n  type User,\n  type UpsertUser,\n  type Company,\n  type InsertCompany,\n  type QuoteDraft,\n  type InsertQuoteDraft,\n  type QuoteItem,\n  type InsertQuoteItem,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for user authentication)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId?: string): Promise<User>;\n  listUsers(): Promise<User[]>;\n  updateUser(userId: string, data: Partial<User>): Promise<User>;\n\n  // Company operations\n  getCompanyByUser(userEmail: string): Promise<Company | undefined>;\n  createCompany(company: InsertCompany): Promise<Company>;\n  updateCompany(companyId: string, data: Partial<Company>): Promise<Company>;\n  listCompanies(): Promise<Company[]>;\n\n  // Quote operations\n  createQuoteDraft(quote: InsertQuoteDraft): Promise<QuoteDraft>;\n  updateQuoteDraft(quoteId: string, data: Partial<QuoteDraft>): Promise<QuoteDraft>;\n  getQuoteDraft(quoteId: string): Promise<QuoteDraft | undefined>;\n  listQuoteDrafts(userEmail?: string): Promise<QuoteDraft[]>;\n  deleteQuoteDraft(quoteId: string): Promise<void>;\n\n  // Quote item operations\n  createQuoteItem(item: InsertQuoteItem): Promise<QuoteItem>;\n  updateQuoteItem(itemId: string, data: Partial<QuoteItem>): Promise<QuoteItem>;\n  deleteQuoteItem(itemId: string): Promise<void>;\n  getQuoteItems(quoteDraftId: string): Promise<QuoteItem[]>;\n\n  // Generate unique quote code\n  generateQuoteCode(): Promise<string>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId?: string): Promise<User> {\n    const updateData: any = { \n      stripeCustomerId,\n      updatedAt: new Date() \n    };\n    if (stripeSubscriptionId) {\n      updateData.stripeSubscriptionId = stripeSubscriptionId;\n    }\n\n    const [user] = await db\n      .update(users)\n      .set(updateData)\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async listUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async updateUser(userId: string, data: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async getCompanyByUser(userEmail: string): Promise<Company | undefined> {\n    const [company] = await db\n      .select()\n      .from(companies)\n      .where(eq(companies.createdBy, userEmail));\n    return company;\n  }\n\n  async createCompany(company: InsertCompany): Promise<Company> {\n    const [newCompany] = await db\n      .insert(companies)\n      .values(company)\n      .returning();\n    return newCompany;\n  }\n\n  async updateCompany(companyId: string, data: Partial<Company>): Promise<Company> {\n    const [company] = await db\n      .update(companies)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(companies.id, companyId))\n      .returning();\n    return company;\n  }\n\n  async listCompanies(): Promise<Company[]> {\n    return await db.select().from(companies).orderBy(desc(companies.createdAt));\n  }\n\n  async createQuoteDraft(quote: InsertQuoteDraft): Promise<QuoteDraft> {\n    const [newQuote] = await db\n      .insert(quoteDrafts)\n      .values(quote)\n      .returning();\n    return newQuote;\n  }\n\n  async updateQuoteDraft(quoteId: string, data: Partial<QuoteDraft>): Promise<QuoteDraft> {\n    const [quote] = await db\n      .update(quoteDrafts)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(quoteDrafts.id, quoteId))\n      .returning();\n    return quote;\n  }\n\n  async getQuoteDraft(quoteId: string): Promise<QuoteDraft | undefined> {\n    const [quote] = await db\n      .select()\n      .from(quoteDrafts)\n      .where(eq(quoteDrafts.id, quoteId));\n    return quote;\n  }\n\n  async listQuoteDrafts(userEmail?: string): Promise<QuoteDraft[]> {\n    if (userEmail) {\n      return await db\n        .select()\n        .from(quoteDrafts)\n        .where(eq(quoteDrafts.createdBy, userEmail))\n        .orderBy(desc(quoteDrafts.createdAt));\n    }\n    return await db\n      .select()\n      .from(quoteDrafts)\n      .orderBy(desc(quoteDrafts.createdAt));\n  }\n\n  async deleteQuoteDraft(quoteId: string): Promise<void> {\n    await db.delete(quoteDrafts).where(eq(quoteDrafts.id, quoteId));\n  }\n\n  async createQuoteItem(item: InsertQuoteItem): Promise<QuoteItem> {\n    const [newItem] = await db\n      .insert(quoteItems)\n      .values(item)\n      .returning();\n    return newItem;\n  }\n\n  async updateQuoteItem(itemId: string, data: Partial<QuoteItem>): Promise<QuoteItem> {\n    const [item] = await db\n      .update(quoteItems)\n      .set(data)\n      .where(eq(quoteItems.id, itemId))\n      .returning();\n    return item;\n  }\n\n  async deleteQuoteItem(itemId: string): Promise<void> {\n    await db.delete(quoteItems).where(eq(quoteItems.id, itemId));\n  }\n\n  async getQuoteItems(quoteDraftId: string): Promise<QuoteItem[]> {\n    return await db\n      .select()\n      .from(quoteItems)\n      .where(eq(quoteItems.quoteDraftId, quoteDraftId));\n  }\n\n  async generateQuoteCode(): Promise<string> {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    \n    // Get the count of quotes created today\n    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n    \n    const [countResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(quoteDrafts)\n      .where(\n        and(\n          sql`${quoteDrafts.createdAt} >= ${startOfDay}`,\n          sql`${quoteDrafts.createdAt} < ${endOfDay}`\n        )\n      );\n    \n    const dailySequence = (countResult?.count || 0) + 1;\n    const sequenceStr = String(dailySequence).padStart(3, '0');\n    \n    return `QT-${year}${month}-${sequenceStr}`;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6721},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  numeric,\n  boolean,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").default(\"user\"), // user, admin, banned, deleted\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  freeDownloadsUsed: integer(\"free_downloads_used\").default(0), // Track free PDF downloads\n  hasActiveSubscription: boolean(\"has_active_subscription\").default(false), // Cache subscription status\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Companies table\nexport const companies = pgTable(\"companies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  logoUrl: varchar(\"logo_url\"),\n  subscriptionStatus: varchar(\"subscription_status\").default(\"active\"), // active, past_due, cancelled, blocked\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  blockedUntil: timestamp(\"blocked_until\"),\n  pendingBlockDate: timestamp(\"pending_block_date\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.email),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Quote items schema\nexport const quoteItems = pgTable(\"quote_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  quoteDraftId: varchar(\"quote_draft_id\").notNull().references(() => quoteDrafts.id, { onDelete: \"cascade\" }),\n  description: text(\"description\").notNull(),\n  unitPrice: numeric(\"unit_price\").notNull(),\n  neededQuantity: numeric(\"needed_quantity\").notNull(),\n  ownedQuantity: numeric(\"owned_quantity\").default(\"0\"),\n  buyQuantity: numeric(\"buy_quantity\").notNull(),\n  total: numeric(\"total\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Quote drafts table\nexport const quoteDrafts = pgTable(\"quote_drafts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\").notNull().unique(),\n  title: varchar(\"title\").notNull(),\n  clientName: varchar(\"client_name\"),\n  clientEmail: varchar(\"client_email\"),\n  discount: numeric(\"discount\").default(\"0\"),\n  currency: varchar(\"currency\").default(\"BRL\"),\n  templateVariant: varchar(\"template_variant\").default(\"variant_a\"), // variant_a to variant_e\n  note: text(\"note\"),\n  status: varchar(\"status\").default(\"draft\"), // draft, finalized\n  pdfPath: varchar(\"pdf_path\"),\n  subtotal: numeric(\"subtotal\"),\n  total: numeric(\"total\"),\n  companyId: varchar(\"company_id\").notNull().references(() => companies.id),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.email),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  companies: many(companies),\n  quoteDrafts: many(quoteDrafts),\n}));\n\nexport const companiesRelations = relations(companies, ({ many, one }) => ({\n  quoteDrafts: many(quoteDrafts),\n  createdByUser: one(users, {\n    fields: [companies.createdBy],\n    references: [users.email],\n  }),\n}));\n\nexport const quoteDraftsRelations = relations(quoteDrafts, ({ many, one }) => ({\n  items: many(quoteItems),\n  company: one(companies, {\n    fields: [quoteDrafts.companyId],\n    references: [companies.id],\n  }),\n  createdByUser: one(users, {\n    fields: [quoteDrafts.createdBy],\n    references: [users.email],\n  }),\n}));\n\nexport const quoteItemsRelations = relations(quoteItems, ({ one }) => ({\n  quoteDraft: one(quoteDrafts, {\n    fields: [quoteItems.quoteDraftId],\n    references: [quoteDrafts.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCompanySchema = createInsertSchema(companies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertQuoteDraftSchema = createInsertSchema(quoteDrafts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertQuoteItemSchema = createInsertSchema(quoteItems).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Company = typeof companies.$inferSelect;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\n\nexport type QuoteDraft = typeof quoteDrafts.$inferSelect;\nexport type InsertQuoteDraft = z.infer<typeof insertQuoteDraftSchema>;\n\nexport type QuoteItem = typeof quoteItems.$inferSelect;\nexport type InsertQuoteItem = z.infer<typeof insertQuoteItemSchema>;\n","size_bytes":5428},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Quotes from \"@/pages/quotes\";\nimport QuoteEditor from \"@/pages/quote-editor\";\nimport CompanyPage from \"@/pages/company\";\nimport Subscription from \"@/pages/subscription\";\nimport AdminPanel from \"@/pages/admin-panel\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/quotes\" component={Quotes} />\n          <Route path=\"/quote-editor\" component={QuoteEditor} />\n          <Route path=\"/quote-editor/:id\" component={QuoteEditor} />\n          <Route path=\"/company\" component={CompanyPage} />\n          <Route path=\"/subscription\" component={Subscription} />\n          <Route path=\"/admin\" component={AdminPanel} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1579},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217.2, 91.2%, 59.8%);\n  --sidebar-primary-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(224.3, 76.3%, 94.1%);\n  --font-sans: system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":4855},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ItemsList.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Plus, Trash2, Package } from \"lucide-react\";\n\ninterface QuoteItem {\n  description: string;\n  unit_price: number;\n  needed_quantity: number;\n  owned_quantity: number;\n  buy_quantity: number;\n  total: number;\n}\n\ninterface ItemsListProps {\n  items: QuoteItem[];\n  onChange: (items: QuoteItem[]) => void;\n  disabled?: boolean;\n}\n\nexport default function ItemsList({ items, onChange, disabled }: ItemsListProps) {\n  const addItem = () => {\n    const newItems = [...items, { \n      description: '', \n      unit_price: 0, \n      needed_quantity: 1, \n      owned_quantity: 0,\n      buy_quantity: 1,\n      total: 0 \n    }];\n    onChange(newItems);\n  };\n\n  const removeItem = (index: number) => {\n    const newItems = items.filter((_, i) => i !== index);\n    onChange(newItems);\n  };\n\n  const updateItem = (index: number, field: string, value: any) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], [field]: value };\n    \n    // Calculate buy_quantity and total\n    if (field === 'needed_quantity' || field === 'owned_quantity' || field === 'unit_price') {\n      const needed = newItems[index].needed_quantity || 0;\n      const owned = newItems[index].owned_quantity || 0;\n      const buyQty = Math.max(0, needed - owned);\n      \n      newItems[index].buy_quantity = buyQty;\n      newItems[index].total = buyQty * (newItems[index].unit_price || 0);\n    }\n    \n    onChange(newItems);\n  };\n\n  return (\n    <Card className=\"border-0 shadow-lg\">\n      <CardHeader className=\"border-b border-gray-100\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Package className=\"w-5 h-5 text-blue-600\" />\n            Itens do Orçamento\n          </CardTitle>\n          <Button\n            onClick={addItem}\n            size=\"sm\"\n            disabled={disabled}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n            data-testid=\"button-add-item\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Adicionar Item\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow className=\"bg-gray-50\">\n                <TableHead className=\"w-[25%]\">Item</TableHead>\n                <TableHead className=\"w-[15%] text-right\">Preço</TableHead>\n                <TableHead className=\"w-[10%] text-right\">Necessário</TableHead>\n                <TableHead className=\"w-[10%] text-right\">Já Tenho</TableHead>\n                <TableHead className=\"w-[10%] text-right\">Comprar</TableHead>\n                <TableHead className=\"w-[15%] text-right\">Total</TableHead>\n                <TableHead className=\"w-[15%] text-right\">A Pagar</TableHead>\n                <TableHead className=\"w-[5%] text-center\">Ações</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {items.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={8} className=\"text-center py-8 text-gray-500\">\n                    Nenhum item adicionado. Clique em \"Adicionar Item\" para começar.\n                  </TableCell>\n                </TableRow>\n              ) : (\n                items.map((item, index) => {\n                  const economia = (item.owned_quantity || 0) * (item.unit_price || 0);\n                  const totalNecessario = (item.needed_quantity || 0) * (item.unit_price || 0);\n                  \n                  return (\n                    <TableRow key={index}>\n                      <TableCell>\n                        <Input\n                          value={item.description}\n                          onChange={(e) => updateItem(index, 'description', e.target.value)}\n                          placeholder=\"Descrição do item\"\n                          disabled={disabled}\n                          data-testid={`input-item-description-${index}`}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"relative\">\n                          <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-sm text-gray-500\">\n                            R$\n                          </span>\n                          <Input\n                            type=\"number\"\n                            min=\"0\"\n                            step=\"0.01\"\n                            value={item.unit_price}\n                            onChange={(e) => updateItem(index, 'unit_price', parseFloat(e.target.value) || 0)}\n                            className=\"pl-8 text-right\"\n                            disabled={disabled}\n                            data-testid={`input-item-price-${index}`}\n                          />\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          step=\"1\"\n                          value={item.needed_quantity}\n                          onChange={(e) => updateItem(index, 'needed_quantity', parseInt(e.target.value) || 0)}\n                          className=\"text-right\"\n                          disabled={disabled}\n                          data-testid={`input-item-needed-${index}`}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          max={item.needed_quantity || 0}\n                          step=\"1\"\n                          value={item.owned_quantity}\n                          onChange={(e) => updateItem(index, 'owned_quantity', parseInt(e.target.value) || 0)}\n                          className=\"text-right text-orange-600 font-medium\"\n                          disabled={disabled}\n                          data-testid={`input-item-owned-${index}`}\n                        />\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <span className=\"font-medium text-blue-600\" data-testid={`text-item-buy-${index}`}>\n                          {item.buy_quantity || 0}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <span className=\"font-medium\" data-testid={`text-item-total-${index}`}>\n                          R$ {totalNecessario.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"space-y-1\">\n                          <span className=\"font-semibold text-green-600 block\" data-testid={`text-item-payment-${index}`}>\n                            R$ {(item.total || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                          </span>\n                          {economia > 0 && (\n                            <span className=\"text-xs text-gray-500 block\">\n                              Economia: R$ {economia.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                            </span>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => removeItem(index)}\n                          className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                          disabled={disabled}\n                          data-testid={`button-remove-item-${index}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })\n              )}\n            </TableBody>\n          </Table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8523},"client/src/components/QuoteHeader.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Building2, User, Mail } from \"lucide-react\";\n\ninterface QuoteHeaderProps {\n  quote: {\n    title: string;\n    client_name: string;\n    client_email: string;\n  };\n  onChange: (updater: (prev: any) => any) => void;\n}\n\nexport default function QuoteHeader({ quote, onChange }: QuoteHeaderProps) {\n  const handleChange = (field: string, value: string) => {\n    onChange(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Card className=\"border-0 shadow-lg\">\n      <CardHeader className=\"border-b border-gray-100\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Building2 className=\"w-5 h-5 text-blue-600\" />\n          Informações do Orçamento\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pt-6 space-y-6\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"title\">Título do Orçamento</Label>\n          <Input\n            id=\"title\"\n            value={quote.title}\n            onChange={(e) => handleChange('title', e.target.value)}\n            placeholder=\"Ex: Desenvolvimento de Website\"\n            className=\"text-lg font-medium\"\n            data-testid=\"input-quote-title\"\n          />\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"client-name\" className=\"flex items-center gap-2\">\n              <User className=\"w-4 h-4\" />\n              Nome do Cliente\n            </Label>\n            <Input\n              id=\"client-name\"\n              value={quote.client_name}\n              onChange={(e) => handleChange('client_name', e.target.value)}\n              placeholder=\"Nome da empresa ou pessoa\"\n              data-testid=\"input-client-name\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"client-email\" className=\"flex items-center gap-2\">\n              <Mail className=\"w-4 h-4\" />\n              Email do Cliente\n            </Label>\n            <Input\n              id=\"client-email\"\n              type=\"email\"\n              value={quote.client_email}\n              onChange={(e) => handleChange('client_email', e.target.value)}\n              placeholder=\"email@cliente.com\"\n              data-testid=\"input-client-email\"\n            />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2531},"client/src/components/QuoteSummary.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Calculator, Percent } from \"lucide-react\";\n\ninterface QuoteItem {\n  total: number;\n}\n\ninterface QuoteSummaryProps {\n  items: QuoteItem[];\n  discount: number;\n  onDiscountChange: (discount: number) => void;\n  disabled?: boolean;\n}\n\nexport default function QuoteSummary({ items, discount, onDiscountChange, disabled }: QuoteSummaryProps) {\n  const subtotal = items.reduce((sum, item) => sum + (item.total || 0), 0);\n  const discountAmount = (subtotal * discount) / 100;\n  const total = subtotal - discountAmount;\n\n  return (\n    <Card className=\"border-0 shadow-lg\">\n      <CardHeader className=\"border-b border-gray-100\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Calculator className=\"w-5 h-5 text-blue-600\" />\n          Resumo do Orçamento\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pt-6 space-y-6\">\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-gray-600\">Subtotal:</span>\n            <span className=\"font-semibold\" data-testid=\"text-subtotal\">\n              R$ {subtotal.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n            </span>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"discount\" className=\"flex items-center gap-2\">\n              <Percent className=\"w-4 h-4\" />\n              Desconto (%)\n            </Label>\n            <Input\n              id=\"discount\"\n              type=\"number\"\n              min=\"0\"\n              max=\"100\"\n              step=\"0.01\"\n              value={discount}\n              onChange={(e) => onDiscountChange(parseFloat(e.target.value) || 0)}\n              placeholder=\"0\"\n              disabled={disabled}\n              data-testid=\"input-discount\"\n            />\n            {discount > 0 && (\n              <div className=\"flex justify-between items-center text-sm\">\n                <span className=\"text-red-600\">Desconto aplicado:</span>\n                <span className=\"text-red-600 font-medium\" data-testid=\"text-discount-amount\">\n                  -R$ {discountAmount.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                </span>\n              </div>\n            )}\n          </div>\n\n          <hr className=\"border-gray-200\" />\n\n          <div className=\"flex justify-between items-center text-lg\">\n            <span className=\"font-semibold text-gray-900\">Total:</span>\n            <span className=\"font-bold text-green-600 text-xl\" data-testid=\"text-total\">\n              R$ {total.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"bg-gray-50 rounded-lg p-4\">\n          <h4 className=\"font-medium text-gray-900 mb-2\">Informações</h4>\n          <div className=\"space-y-1 text-sm text-gray-600\">\n            <div className=\"flex justify-between\">\n              <span>Itens:</span>\n              <span data-testid=\"text-items-count\">{items.length}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Moeda:</span>\n              <span>Real Brasileiro (BRL)</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3449},"client/src/components/TemplateSelector.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Palette, Check } from \"lucide-react\";\n\ninterface TemplateSelectorProps {\n  selectedVariant: string;\n  onChange: (variant: string) => void;\n}\n\nexport default function TemplateSelector({ selectedVariant, onChange }: TemplateSelectorProps) {\n  const templates = [\n    {\n      id: 'variant_a',\n      name: 'Template Clássico',\n      description: 'Design limpo com cores azuis corporativas.',\n      colors: ['#2563eb', '#1e40af', '#1d4ed8']\n    },\n    {\n      id: 'variant_b', \n      name: 'Template Moderno',\n      description: 'Layout contemporâneo com gradientes roxos.',\n      colors: ['#7c3aed', '#8b5cf6', '#a855f7']\n    },\n    {\n      id: 'variant_c',\n      name: 'Template Elegante',\n      description: 'Tema escuro com detalhes em dourado. Sofisticado.',\n      colors: ['#2d3748', '#a0aec0', '#c59d5f']\n    },\n    {\n      id: 'variant_d',\n      name: 'Template Criativo',\n      description: 'Cores vibrantes de verde e um layout dinâmico.',\n      colors: ['#047857', '#059669', '#10b981']\n    },\n    {\n      id: 'variant_e',\n      name: 'Template Minimalista',\n      description: 'Foco no conteúdo, com um forte destaque em laranja.',\n      colors: ['#1f2937', '#e5e7eb', '#f97316']\n    }\n  ];\n\n  return (\n    <Card className=\"border-0 shadow-lg\">\n      <CardHeader className=\"border-b border-gray-100\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Palette className=\"w-5 h-5 text-blue-600\" />\n          Template do Orçamento\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pt-6\">\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {templates.map((template) => (\n            <div\n              key={template.id}\n              className={`relative border-2 rounded-lg p-4 cursor-pointer transition-all duration-200 ${\n                selectedVariant === template.id\n                  ? 'border-blue-600 bg-blue-50'\n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n              onClick={() => onChange(template.id)}\n              data-testid={`template-${template.id}`}\n            >\n              {selectedVariant === template.id && (\n                <div className=\"absolute top-2 right-2 w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center\">\n                  <Check className=\"w-4 h-4 text-white\" />\n                </div>\n              )}\n              \n              <div className=\"space-y-3\">\n                <div className=\"aspect-[16/10] bg-gray-100 rounded border overflow-hidden\">\n                  <div className=\"w-full h-full bg-gradient-to-br from-gray-200 to-gray-300 flex items-center justify-center\">\n                    <span className=\"text-gray-500 text-sm\">Preview</span>\n                  </div>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">{template.name}</h3>\n                  <p className=\"text-sm text-gray-600 mt-1\">{template.description}</p>\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  {template.colors.map((color, index) => (\n                    <div\n                      key={index}\n                      className=\"w-6 h-6 rounded-full border-2 border-white shadow-sm\"\n                      style={{ backgroundColor: color }}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3661},"client/src/entities/Company.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\nimport type { Company, InsertCompany } from \"@shared/schema\";\n\nexport class CompanyEntity {\n  static async me(): Promise<Company | null> {\n    const response = await apiRequest(\"GET\", \"/api/companies/me\");\n    const data = await response.json();\n    return data || null;\n  }\n\n  static async create(company: InsertCompany): Promise<Company> {\n    const response = await apiRequest(\"POST\", \"/api/companies\", company);\n    return response.json();\n  }\n\n  static async update(companyId: string, data: Partial<Company>): Promise<Company> {\n    const response = await apiRequest(\"PUT\", `/api/companies/${companyId}`, data);\n    return response.json();\n  }\n\n  static async list(): Promise<Company[]> {\n    const response = await apiRequest(\"GET\", \"/api/admin/companies\");\n    return response.json();\n  }\n}\n\nexport { CompanyEntity as Company };\n","size_bytes":884},"client/src/entities/QuoteDraft.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\nimport type { QuoteDraft, InsertQuoteDraft, QuoteItem, InsertQuoteItem } from \"@shared/schema\";\n\nexport class QuoteDraftEntity {\n  static async list(): Promise<QuoteDraft[]> {\n    const response = await apiRequest(\"GET\", \"/api/quotes\");\n    return response.json();\n  }\n\n  static async get(quoteId: string): Promise<QuoteDraft & { items: QuoteItem[] }> {\n    const response = await apiRequest(\"GET\", `/api/quotes/${quoteId}`);\n    return response.json();\n  }\n\n  static async create(quote: Omit<InsertQuoteDraft, 'code' | 'companyId' | 'createdBy'>): Promise<QuoteDraft> {\n    const response = await apiRequest(\"POST\", \"/api/quotes\", quote);\n    return response.json();\n  }\n\n  static async update(quoteId: string, data: Partial<QuoteDraft>): Promise<QuoteDraft> {\n    const response = await apiRequest(\"PUT\", `/api/quotes/${quoteId}`, data);\n    return response.json();\n  }\n\n  static async delete(quoteId: string): Promise<void> {\n    await apiRequest(\"DELETE\", `/api/quotes/${quoteId}`);\n  }\n\n  static async getItems(quoteId: string): Promise<QuoteItem[]> {\n    const response = await apiRequest(\"GET\", `/api/quotes/${quoteId}/items`);\n    return response.json();\n  }\n\n  static async createItem(quoteId: string, item: Omit<InsertQuoteItem, 'quoteDraftId'>): Promise<QuoteItem> {\n    const response = await apiRequest(\"POST\", `/api/quotes/${quoteId}/items`, item);\n    return response.json();\n  }\n\n  static async updateItem(quoteId: string, itemId: string, data: Partial<QuoteItem>): Promise<QuoteItem> {\n    const response = await apiRequest(\"PUT\", `/api/quotes/${quoteId}/items/${itemId}`, data);\n    return response.json();\n  }\n\n  static async deleteItem(quoteId: string, itemId: string): Promise<void> {\n    await apiRequest(\"DELETE\", `/api/quotes/${quoteId}/items/${itemId}`);\n  }\n}\n\nexport { QuoteDraftEntity as QuoteDraft };\n","size_bytes":1878},"client/src/entities/User.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\nexport class UserEntity {\n  static async me(): Promise<User> {\n    const response = await apiRequest(\"GET\", \"/api/auth/user\");\n    return response.json();\n  }\n\n  static async list(): Promise<User[]> {\n    const response = await apiRequest(\"GET\", \"/api/admin/users\");\n    return response.json();\n  }\n\n  static async update(userId: string, data: Partial<User>): Promise<User> {\n    const response = await apiRequest(\"PUT\", `/api/admin/users/${userId}`, data);\n    return response.json();\n  }\n}\n\nexport { UserEntity as User };\n","size_bytes":617},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/pdfGenerator.ts":{"content":"import { Company } from \"@/entities/Company\";\n\ninterface QuoteItem {\n  description: string;\n  unit_price: number;\n  needed_quantity: number;\n  owned_quantity: number;\n  buy_quantity: number;\n  total: number;\n}\n\ninterface Quote {\n  code: string;\n  title: string;\n  client_name: string;\n  client_email: string;\n  items: QuoteItem[];\n  discount: number;\n  template_variant: string;\n  note?: string;\n}\n\nexport const generateQuotePDF = async (quote: Quote) => {\n  // Get company data for logo\n  const companies = await Company.list();\n  const company = companies.length > 0 ? companies[0] : null;\n  \n  // Calculate totals\n  const subtotal = quote.items.reduce((sum, item) => sum + (item.total || 0), 0);\n  const discountAmount = (subtotal * (quote.discount || 0)) / 100;\n  const total = subtotal - discountAmount;\n\n  // Generate HTML content based on template variant\n  const htmlContent = generateHTMLTemplate(quote, company, { subtotal, total, discountAmount });\n  \n  // Create a new window with the PDF content\n  const pdfWindow = window.open('', '_blank');\n  if (pdfWindow) {\n    pdfWindow.document.write(htmlContent);\n    pdfWindow.document.close();\n    \n    // Trigger print dialog\n    setTimeout(() => {\n      pdfWindow.print();\n    }, 500);\n  }\n\n  return { success: true, url: '#' };\n};\n\nconst getTemplateColors = (variant: string) => {\n  switch (variant) {\n    case 'variant_b': // Moderno\n      return { main: '#7c3aed', dark: '#6b21a8', light: '#e9d5ff', bg: '#faf5ff', bg_grad: 'linear-gradient(135deg, #faf5ff 0%, #f3e8ff 100%)', header_grad: 'linear-gradient(135deg, #7c3aed 0%, #8b5cf6 100%)' };\n    case 'variant_c': // Elegante (Dark Theme)\n      return { main: '#c59d5f', dark: '#2d3748', light: '#4a5568', bg: '#2d3748', bg_grad: '#2d3748', header_grad: 'linear-gradient(135deg, #4a5568 0%, #2d3748 100%)', text: '#f7fafc', text_alt: '#a0aec0' };\n    case 'variant_d': // Criativo\n      return { main: '#047857', dark: '#065f46', light: '#d1fae5', bg: '#f0fdf4', bg_grad: 'linear-gradient(135deg, #f0fdf4 0%, #d1fae5 100%)', header_grad: 'linear-gradient(135deg, #059669 0%, #10b981 100%)' };\n    case 'variant_e': // Minimalista\n      return { main: '#f97316', dark: '#1f2937', light: '#e5e7eb', bg: '#f9fafb', bg_grad: '#f9fafb', header_grad: '#1f2937' };\n    default: // Clássico (variant_a)\n      return { main: '#2563eb', dark: '#1e40af', light: '#e0e7ff', bg: '#eff6ff', bg_grad: 'linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%)', header_grad: 'linear-gradient(135deg, #2563eb 0%, #3b82f6 100%)' };\n  }\n};\n\nconst generateHTMLTemplate = (quote: Quote, company: any, totals: { subtotal: number; total: number; discountAmount: number }) => {\n  const colors = getTemplateColors(quote.template_variant);\n  const isDarkTheme = quote.template_variant === 'variant_c';\n  \n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Orçamento - ${quote.code}</title>\n      <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        body { \n          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; \n          line-height: 1.6; \n          color: ${isDarkTheme ? colors.text : '#333'};\n          background: ${isDarkTheme ? colors.bg : 'white'};\n        }\n        .container { max-width: 800px; margin: 0 auto; padding: 40px 20px; }\n        \n        /* Header */\n        .header {\n          display: flex;\n          justify-content: space-between;\n          align-items: flex-start;\n          margin-bottom: 40px;\n          padding-bottom: 20px;\n          border-bottom: 3px solid ${colors.main};\n        }\n        .logo-section { flex: 1; }\n        .logo { max-width: 200px; max-height: 80px; object-fit: contain; }\n        .company-name {\n          font-size: 24px;\n          font-weight: bold;\n          color: ${colors.main};\n          margin-top: 10px;\n        }\n        .quote-info { text-align: right; flex: 1; }\n        .quote-title {\n          font-size: 28px;\n          font-weight: bold;\n          color: ${colors.main};\n          margin-bottom: 10px;\n        }\n        .quote-code {\n          background: ${colors.main};\n          color: white;\n          padding: 8px 16px;\n          border-radius: 6px;\n          font-weight: bold;\n          display: inline-block;\n          ${quote.template_variant === 'variant_e' ? 'color: #1f2937;' : ''}\n        }\n        \n        /* Client Info */\n        .client-section {\n          background: ${isDarkTheme ? colors.light : colors.bg_grad};\n          padding: 25px;\n          border-radius: 10px;\n          margin-bottom: 30px;\n        }\n        .client-title {\n          font-size: 18px;\n          font-weight: bold;\n          color: ${isDarkTheme ? colors.main : colors.dark};\n          margin-bottom: 15px;\n        }\n        .client-info { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; }\n        .client-field strong { color: ${colors.main}; }\n        \n        /* Items Table */\n        .items-section { margin-bottom: 30px; }\n        .section-title {\n          font-size: 20px;\n          font-weight: bold;\n          color: ${colors.main};\n          margin-bottom: 20px;\n          padding-bottom: 10px;\n          border-bottom: 2px solid ${colors.light};\n        }\n        .items-table {\n          width: 100%;\n          border-collapse: collapse;\n          box-shadow: ${isDarkTheme ? 'none' : '0 4px 6px rgba(0,0,0,0.1)'};\n          border-radius: 8px;\n          overflow: hidden;\n          border: 1px solid ${isDarkTheme ? colors.light : 'transparent'};\n        }\n        .items-table th {\n          background: ${colors.header_grad};\n          color: white;\n          padding: 15px 12px;\n          text-align: left;\n          font-weight: 600;\n        }\n        .items-table td {\n          padding: 12px;\n          border-bottom: 1px solid ${isDarkTheme ? colors.light : '#e5e7eb'};\n          color: ${isDarkTheme ? colors.text_alt : '#333'};\n        }\n        .items-table tbody tr:nth-child(even) { background: ${isDarkTheme ? 'rgba(255,255,255,0.02)' : colors.bg}; }\n        .items-table tbody tr:hover { background: ${isDarkTheme ? colors.light : '#f1f5f9'}; }\n        .text-right { text-align: right; }\n        .font-semibold { font-weight: 600; }\n        .item-desc { color: ${isDarkTheme ? colors.text : '#333'}; }\n        .text-green-600 { color: ${isDarkTheme ? '#38a169' : '#059669'}; }\n        \n        /* Summary */\n        .summary-section {\n          background: ${isDarkTheme ? colors.dark : 'white'};\n          border: 2px solid ${colors.light};\n          border-radius: 10px;\n          padding: 25px;\n          margin-bottom: 30px;\n        }\n        .summary-row { display: flex; justify-content: space-between; align-items: center; padding: 8px 0; }\n        .summary-row.total {\n          border-top: 2px solid ${colors.main};\n          margin-top: 15px;\n          padding-top: 15px;\n          font-size: 20px;\n          font-weight: bold;\n        }\n        .total-value { color: ${colors.main}; font-size: 24px; }\n        \n        /* Notes */\n        .notes-section {\n          background: ${isDarkTheme ? colors.dark : '#f9fafb'};\n          border-left: 4px solid ${colors.main};\n          padding: 20px;\n          border-radius: 0 8px 8px 0;\n          margin-bottom: 30px;\n        }\n        .notes-title { font-weight: bold; color: ${colors.main}; margin-bottom: 10px; }\n        \n        /* Footer */\n        .footer {\n          text-align: center;\n          margin-top: 40px;\n          padding-top: 20px;\n          border-top: 1px solid ${colors.light};\n          color: #6b7280;\n          font-size: 14px;\n        }\n        \n        @media print {\n          body { margin: 0; background: white; color: #333; }\n          .container { padding: 20px; }\n          .quote-info, .items-table { page-break-inside: avoid; }\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <!-- Header -->\n        <div class=\"header\">\n          <div class=\"logo-section\">\n            ${company?.logo_url ? `<img src=\"${company.logo_url}\" alt=\"Logo\" class=\"logo\" ${isDarkTheme ? 'style=\"filter: invert(1) grayscale(1) brightness(2);\"' : ''}>` : `<div class=\"company-name\">${company?.name || 'Sua Empresa'}</div>`}\n          </div>\n          <div class=\"quote-info\">\n            <div class=\"quote-title\">ORÇAMENTO</div>\n            <div class=\"quote-code\">${quote.code}</div>\n            <div style=\"margin-top: 15px; font-size: 14px; color: #6b7280;\">\n              Data: ${new Date().toLocaleDateString('pt-BR')}\n            </div>\n          </div>\n        </div>\n\n        <!-- Client Info -->\n        <div class=\"client-section\">\n          <div class=\"client-title\">Dados do Cliente</div>\n          <div class=\"client-info\">\n            <div class=\"client-field\">\n              <strong>Cliente:</strong> ${quote.client_name || 'N/A'}\n            </div>\n            <div class=\"client-field\">\n              <strong>Email:</strong> ${quote.client_email || 'N/A'}\n            </div>\n          </div>\n        </div>\n\n        <!-- Title -->\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <h1 style=\"color: ${colors.main}; font-size: 24px;\">\n            ${quote.title}\n          </h1>\n        </div>\n\n        <!-- Items -->\n        <div class=\"items-section\">\n          <div class=\"section-title\">Itens do Orçamento</div>\n          <table class=\"items-table\">\n            <thead>\n              <tr>\n                <th>Item</th>\n                <th class=\"text-right\">Preço Unit.</th>\n                <th class=\"text-right\">Necessário</th>\n                <th class=\"text-right\">Já Tenho</th>\n                <th class=\"text-right\">Comprar</th>\n                <th class=\"text-right\">A Pagar</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${quote.items.map(item => {\n                const economia = (item.owned_quantity || 0) * (item.unit_price || 0);\n                return `\n                <tr>\n                  <td class=\"item-desc\">${item.description}</td>\n                  <td class=\"text-right\">R$ ${(item.unit_price || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</td>\n                  <td class=\"text-right\">${item.needed_quantity || 0}</td>\n                  <td class=\"text-right\" style=\"color: #f97316; font-weight: 600;\">${item.owned_quantity || 0}</td>\n                  <td class=\"text-right\" style=\"color: #2563eb; font-weight: 600;\">${item.buy_quantity || 0}</td>\n                  <td class=\"text-right font-semibold text-green-600\">\n                    R$ ${(item.total || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                    ${economia > 0 ? `<br><small style=\"color: #6b7280;\">Economia: R$ ${economia.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</small>` : ''}\n                  </td>\n                </tr>\n              `;}).join('')}\n            </tbody>\n          </table>\n        </div>\n\n        <!-- Summary -->\n        <div class=\"summary-section\">\n          <div class=\"summary-row\">\n            <span>Subtotal:</span>\n            <span>R$ ${totals.subtotal.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</span>\n          </div>\n          ${quote.discount > 0 ? `\n          <div class=\"summary-row\">\n            <span>Desconto (${quote.discount}%):</span>\n            <span style=\"color: #dc2626;\">-R$ ${totals.discountAmount.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</span>\n          </div>\n          ` : ''}\n          <div class=\"summary-row total\">\n            <span>TOTAL:</span>\n            <span class=\"total-value\">R$ ${totals.total.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</span>\n          </div>\n        </div>\n\n        ${quote.note ? `\n        <!-- Notes -->\n        <div class=\"notes-section\">\n          <div class=\"notes-title\">Observações:</div>\n          <div>${quote.note}</div>\n        </div>\n        ` : ''}\n\n        <!-- Footer -->\n        <div class=\"footer\">\n          <p>Este orçamento foi gerado automaticamente pelo QuoteMaster</p>\n          <p>Válido por 30 dias a partir da data de emissão</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n};\n\nexport default { generateQuotePDF };","size_bytes":12181},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-panel.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { \n  Shield, \n  Users, \n  FileText, \n  DollarSign,\n  Ban,\n  CheckCircle2,\n  AlertTriangle,\n  Crown,\n  Trash2\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { User } from \"@/entities/User\";\nimport { Company } from \"@/entities/Company\";\nimport { QuoteDraft } from \"@/entities/QuoteDraft\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { Link } from \"wouter\";\n\nexport default function AdminPanel() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [actionDialog, setActionDialog] = useState<{ open: boolean; user: any; action: string | null }>({ \n    open: false, \n    user: null, \n    action: null \n  });\n  const [processing, setProcessing] = useState(false);\n\n  // Redirect to home if not authenticated or not admin\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n\n    if (!isLoading && isAuthenticated && user?.role !== 'admin') {\n      toast({\n        title: \"Access Denied\",\n        description: \"Admin access required.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: users = [], error: usersError } = useQuery({\n    queryKey: [\"admin\", \"users\"],\n    queryFn: () => User.list(),\n    retry: false,\n    enabled: isAuthenticated && user?.role === 'admin',\n  });\n\n  // Handle users error\n  useEffect(() => {\n    if (usersError && isUnauthorizedError(usersError as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [usersError, toast]);\n\n  const { data: companies = [], error: companiesError } = useQuery({\n    queryKey: [\"admin\", \"companies\"],\n    queryFn: () => Company.list(),\n    retry: false,\n    enabled: isAuthenticated && user?.role === 'admin',\n  });\n\n  // Handle companies error\n  useEffect(() => {\n    if (companiesError && isUnauthorizedError(companiesError as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [companiesError, toast]);\n\n  const { data: quotes = [], error: quotesError } = useQuery({\n    queryKey: [\"admin\", \"quotes\"],\n    queryFn: () => QuoteDraft.list(),\n    retry: false,\n    enabled: isAuthenticated && user?.role === 'admin',\n  });\n\n  // Handle quotes error\n  useEffect(() => {\n    if (quotesError && isUnauthorizedError(quotesError as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [quotesError, toast]);\n\n  const updateUserMutation = useMutation({\n    mutationFn: ({ userId, data }: { userId: string; data: any }) => User.update(userId, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin\", \"users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"admin\", \"companies\"] });\n      setActionDialog({ open: false, user: null, action: null });\n      toast({\n        title: \"Success\",\n        description: \"User updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUserAction = (selectedUser: any, action: string) => {\n    setActionDialog({ open: true, user: selectedUser, action });\n  };\n\n  const confirmUserAction = async () => {\n    if (!actionDialog.user || !actionDialog.action) return;\n\n    try {\n      setProcessing(true);\n      const { user: selectedUser, action } = actionDialog;\n\n      if (action === 'delete') {\n        await updateUserMutation.mutateAsync({\n          userId: selectedUser.id,\n          data: { \n            role: 'deleted',\n            email: `deleted_${Date.now()}_${selectedUser.email}`\n          }\n        });\n      } else if (action === 'ban') {\n        await updateUserMutation.mutateAsync({\n          userId: selectedUser.id,\n          data: { role: 'banned' }\n        });\n      } else if (action === 'unban') {\n        await updateUserMutation.mutateAsync({\n          userId: selectedUser.id,\n          data: { role: 'user' }\n        });\n      }\n    } catch (error) {\n      console.error(\"Error performing user action:\", error);\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const getUserCompany = (userEmail: string) => {\n    return companies.find(c => c.createdBy === userEmail);\n  };\n\n  const getUserStatus = (selectedUser: any) => {\n    if (selectedUser.role === 'admin') return { text: 'Admin', variant: 'default', color: 'text-blue-600' };\n    if (selectedUser.role === 'banned') return { text: 'Banido', variant: 'destructive', color: 'text-red-600' };\n    if (selectedUser.role === 'deleted') return { text: 'Excluído', variant: 'secondary', color: 'text-gray-600' };\n    \n    const company = getUserCompany(selectedUser.email);\n    if (!company) return { text: 'Sem Empresa', variant: 'secondary', color: 'text-gray-600' };\n    \n    switch (company.subscriptionStatus) {\n      case 'active': return { text: 'Ativo', variant: 'default', color: 'text-green-600' };\n      case 'past_due': return { text: 'Em Atraso', variant: 'destructive', color: 'text-orange-600' };\n      case 'blocked': return { text: 'Bloqueado', variant: 'destructive', color: 'text-red-600' };\n      default: return { text: 'Inativo', variant: 'secondary', color: 'text-gray-600' };\n    }\n  };\n\n  // Calculate stats\n  const stats = {\n    totalUsers: users.length,\n    activeSubscriptions: companies.filter(c => c.subscriptionStatus === 'active').length,\n    totalRevenue: companies.filter(c => c.subscriptionStatus === 'active').length * 30, // R$ 30/mês\n    totalQuotes: quotes.length\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\" />\n      </div>\n    );\n  }\n\n  if (!user || user.role !== 'admin') {\n    return null; // Redirect will handle this\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-white p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-yellow-500 to-orange-600 rounded-2xl mx-auto mb-4 flex items-center justify-center shadow-xl\">\n              <Crown className=\"w-8 h-8 text-white\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\" data-testid=\"heading-admin-panel\">Painel Administrativo</h1>\n            <p className=\"text-gray-600\">\n              Bem-vindo, {user?.firstName} {user?.lastName} • Gerencie usuários e monitore o sistema\n            </p>\n          </div>\n          <Link href=\"/\">\n            <Button variant=\"outline\" data-testid=\"button-back-dashboard\">Dashboard</Button>\n          </Link>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"border-0 shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Total de Usuários</p>\n                  <p className=\"text-2xl font-bold text-gray-900 mt-2\" data-testid=\"stat-total-users\">{stats.totalUsers}</p>\n                </div>\n                <div className=\"p-3 rounded-lg bg-blue-50\">\n                  <Users className=\"w-6 h-6 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Assinaturas Ativas</p>\n                  <p className=\"text-2xl font-bold text-gray-900 mt-2\" data-testid=\"stat-active-subscriptions\">{stats.activeSubscriptions}</p>\n                </div>\n                <div className=\"p-3 rounded-lg bg-green-50\">\n                  <CheckCircle2 className=\"w-6 h-6 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Receita Mensal</p>\n                  <p className=\"text-2xl font-bold text-gray-900 mt-2\" data-testid=\"stat-monthly-revenue\">\n                    R$ {stats.totalRevenue.toLocaleString('pt-BR')}\n                  </p>\n                </div>\n                <div className=\"p-3 rounded-lg bg-purple-50\">\n                  <DollarSign className=\"w-6 h-6 text-purple-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Orçamentos Criados</p>\n                  <p className=\"text-2xl font-bold text-gray-900 mt-2\" data-testid=\"stat-total-quotes\">{stats.totalQuotes}</p>\n                </div>\n                <div className=\"p-3 rounded-lg bg-orange-50\">\n                  <FileText className=\"w-6 h-6 text-orange-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Admin Privileges Alert */}\n        <Alert className=\"border-blue-200 bg-blue-50\">\n          <Shield className=\"h-4 w-4\" />\n          <AlertDescription className=\"text-blue-800\">\n            <strong>Privilégios de Administrador:</strong> Você pode usar o sistema de orçamentos sem limitações de pagamento e gerenciar todos os usuários.\n          </AlertDescription>\n        </Alert>\n\n        {/* Users Management */}\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"border-b border-gray-100\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"w-5 h-5 text-blue-600\" />\n              Gerenciamento de Usuários\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"bg-gray-50\">\n                    <TableHead>Usuário</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Cadastro</TableHead>\n                    <TableHead>Orçamentos</TableHead>\n                    <TableHead className=\"text-right\">Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {users.map((tableUser) => {\n                    const userQuotes = quotes.filter(q => q.createdBy === tableUser.email);\n                    const status = getUserStatus(tableUser);\n                    \n                    return (\n                      <TableRow key={tableUser.id} className=\"hover:bg-gray-50\" data-testid={`user-row-${tableUser.id}`}>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            {tableUser.role === 'admin' && <Crown className=\"w-4 h-4 text-yellow-500\" />}\n                            <span className=\"font-medium\" data-testid={`user-name-${tableUser.id}`}>\n                              {tableUser.firstName} {tableUser.lastName}\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"font-mono text-sm\" data-testid={`user-email-${tableUser.id}`}>\n                          {tableUser.email}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={status.variant as any} className={status.color} data-testid={`user-status-${tableUser.id}`}>\n                            {status.text}\n                          </Badge>\n                        </TableCell>\n                        <TableCell data-testid={`user-created-date-${tableUser.id}`}>\n                          {format(new Date(tableUser.createdAt!), \"dd/MM/yyyy\", { locale: ptBR })}\n                        </TableCell>\n                        <TableCell data-testid={`user-quotes-count-${tableUser.id}`}>{userQuotes.length}</TableCell>\n                        <TableCell className=\"text-right\">\n                          {tableUser.role !== 'admin' && (\n                            <div className=\"flex gap-2 justify-end\">\n                              {tableUser.role === 'banned' ? (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleUserAction(tableUser, 'unban')}\n                                  className=\"text-green-600 border-green-600 hover:bg-green-50\"\n                                  data-testid={`button-unban-${tableUser.id}`}\n                                >\n                                  <CheckCircle2 className=\"w-4 h-4 mr-1\" />\n                                  Desbanir\n                                </Button>\n                              ) : (\n                                <>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => handleUserAction(tableUser, 'ban')}\n                                    className=\"text-orange-600 border-orange-600 hover:bg-orange-50\"\n                                    data-testid={`button-ban-${tableUser.id}`}\n                                  >\n                                    <Ban className=\"w-4 h-4 mr-1\" />\n                                    Banir\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => handleUserAction(tableUser, 'delete')}\n                                    className=\"text-red-600 border-red-600 hover:bg-red-50\"\n                                    data-testid={`button-delete-${tableUser.id}`}\n                                  >\n                                    <Trash2 className=\"w-4 h-4 mr-1\" />\n                                    Excluir\n                                  </Button>\n                                </>\n                              )}\n                            </div>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Confirmation Dialog */}\n        <Dialog open={actionDialog.open} onOpenChange={() => setActionDialog({ open: false, user: null, action: null })}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"w-5 h-5 text-orange-500\" />\n                Confirmar Ação\n              </DialogTitle>\n              <DialogDescription>\n                {actionDialog.action === 'delete' && \n                  `Tem certeza que deseja EXCLUIR o usuário ${actionDialog.user?.firstName} ${actionDialog.user?.lastName}? Esta ação não pode ser desfeita.`}\n                {actionDialog.action === 'ban' && \n                  `Tem certeza que deseja BANIR o usuário ${actionDialog.user?.firstName} ${actionDialog.user?.lastName}? Ele perderá acesso ao sistema.`}\n                {actionDialog.action === 'unban' && \n                  `Tem certeza que deseja DESBANIR o usuário ${actionDialog.user?.firstName} ${actionDialog.user?.lastName}? Ele terá acesso restaurado.`}\n              </DialogDescription>\n            </DialogHeader>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setActionDialog({ open: false, user: null, action: null })}\n                disabled={processing}\n                data-testid=\"button-cancel-action\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                variant={actionDialog.action === 'delete' ? 'destructive' : 'default'}\n                onClick={confirmUserAction}\n                disabled={processing}\n                data-testid=\"button-confirm-action\"\n              >\n                {processing ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                    Processando...\n                  </>\n                ) : (\n                  <>\n                    {actionDialog.action === 'delete' && 'Excluir'}\n                    {actionDialog.action === 'ban' && 'Banir'}\n                    {actionDialog.action === 'unban' && 'Desbanir'}\n                  </>\n                )}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19371},"client/src/pages/company.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Building, Upload, Save, FileText } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Company } from \"@/entities/Company\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCompanySchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Link } from \"wouter\";\n\nconst companySchema = insertCompanySchema.extend({\n  name: z.string()\n    .min(3, \"Nome da empresa deve ter pelo menos 3 caracteres\")\n    .max(100, \"Nome da empresa deve ter no máximo 100 caracteres\")\n    .regex(/^[A-Za-zÀ-ÿ0-9\\s\\-\\.&]+$/, \"Nome deve conter apenas letras, números e caracteres básicos\"),\n  logoUrl: z.string().url(\"URL inválida\").optional().or(z.literal(\"\")),\n});\n\ntype CompanyForm = z.infer<typeof companySchema>;\n\nexport default function CompanyPage() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: company, isLoading: companyLoading, error: companyError } = useQuery({\n    queryKey: [\"companies\", \"me\"],\n    queryFn: () => Company.me(),\n    retry: false,\n    enabled: isAuthenticated,\n  });\n\n  // Handle company error\n  useEffect(() => {\n    if (companyError && isUnauthorizedError(companyError as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [companyError, toast]);\n\n  const form = useForm<CompanyForm>({\n    resolver: zodResolver(companySchema),\n    defaultValues: {\n      name: \"\",\n      logoUrl: \"\",\n      subscriptionStatus: \"active\",\n    },\n  });\n\n  // Update form when company data loads\n  useEffect(() => {\n    if (company) {\n      form.setValue(\"name\", company.name);\n      form.setValue(\"logoUrl\", company.logoUrl || \"\");\n    }\n  }, [company, form]);\n\n  const createMutation = useMutation({\n    mutationFn: (data: CompanyForm) => Company.create(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"companies\", \"me\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Empresa criada com sucesso!\",\n      });\n      setIsEditing(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao criar empresa. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: CompanyForm) => Company.update(company!.id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"companies\", \"me\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Empresa atualizada com sucesso!\",\n      });\n      setIsEditing(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao atualizar empresa. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: CompanyForm) => {\n    if (company) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleCancel = () => {\n    if (company) {\n      form.setValue(\"name\", company.name);\n      form.setValue(\"logoUrl\", company.logoUrl || \"\");\n    } else {\n      form.reset();\n    }\n    setIsEditing(false);\n  };\n\n  if (isLoading || companyLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground flex items-center gap-3\" data-testid=\"heading-company\">\n              <Building className=\"w-8 h-8\" />\n              Configurações da Empresa\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {company \n                ? \"Gerencie as informações da sua empresa\" \n                : \"Configure os dados da sua empresa para começar a usar o sistema\"\n              }\n            </p>\n          </div>\n          <Link href=\"/\">\n            <Button variant=\"outline\" data-testid=\"button-back-dashboard\">Dashboard</Button>\n          </Link>\n        </div>\n\n        {/* Onboarding Notice */}\n        {!company && (\n          <Card className=\"border-primary/20 bg-primary/5\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Building className=\"w-5 h-5 text-primary\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-foreground mb-2\">Configure sua Empresa</h3>\n                  <p className=\"text-muted-foreground text-sm\">\n                    Para continuar usando o QuoteMaster Pro, é necessário configurar os dados da sua empresa. \n                    Essas informações aparecerão nos seus orçamentos e são obrigatórias para o funcionamento da plataforma.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Company Form */}\n        <Card className=\"shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>{company ? \"Informações da Empresa\" : \"Criar Empresa\"}</span>\n              {company && !isEditing && (\n                <Button \n                  onClick={() => setIsEditing(true)}\n                  data-testid=\"button-edit-company\"\n                >\n                  Editar Informações\n                </Button>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {!company || isEditing ? (\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n                {/* Company Logo */}\n                <div className=\"space-y-4\">\n                  <Label htmlFor=\"logoUrl\">Logo da Empresa</Label>\n                  <div className=\"flex items-center gap-4\">\n                    {(company?.logoUrl || form.watch(\"logoUrl\")) && (\n                      <div className=\"w-16 h-16 bg-muted rounded-lg flex items-center justify-center border\">\n                        <img \n                          src={company?.logoUrl || form.watch(\"logoUrl\")} \n                          alt=\"Logo da empresa\"\n                          className=\"w-14 h-14 object-contain rounded\"\n                          onError={(e) => {\n                            (e.target as HTMLImageElement).style.display = 'none';\n                          }}\n                          data-testid=\"img-company-logo-preview\"\n                        />\n                      </div>\n                    )}\n                    <div className=\"flex-1\">\n                      <Input\n                        id=\"logoUrl\"\n                        placeholder=\"URL do logo da empresa (opcional)\"\n                        {...form.register(\"logoUrl\")}\n                        data-testid=\"input-logo-url\"\n                      />\n                      {form.formState.errors.logoUrl && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {form.formState.errors.logoUrl.message}\n                        </p>\n                      )}\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        Forneça uma URL pública da imagem do logo (formato: JPG, PNG, SVG)\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Company Name */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Nome da Empresa *</Label>\n                  <Input\n                    id=\"name\"\n                    placeholder=\"Ex: Empresa XYZ Ltda.\"\n                    {...form.register(\"name\")}\n                    data-testid=\"input-company-name\"\n                  />\n                  {form.formState.errors.name && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.name.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* Subscription Status (read-only info) */}\n                {company && (\n                  <div className=\"space-y-2\">\n                    <Label>Status da Assinatura</Label>\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-2 h-2 rounded-full ${\n                        company.subscriptionStatus === 'active' ? 'bg-green-500' : 'bg-red-500'\n                      }`} />\n                      <span className=\"text-sm font-medium\" data-testid=\"text-subscription-status\">\n                        {company.subscriptionStatus === 'active' ? 'Ativo' : 'Inativo'}\n                      </span>\n                    </div>\n                  </div>\n                )}\n\n                {/* Form Actions */}\n                <div className=\"flex justify-end gap-3 pt-6 border-t\">\n                  {company && (\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={handleCancel}\n                      data-testid=\"button-cancel-edit\"\n                    >\n                      Cancelar\n                    </Button>\n                  )}\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    className={`flex items-center gap-2 ${!company ? \"bg-primary hover:bg-primary/90\" : \"\"}`}\n                    data-testid=\"button-save-company\"\n                  >\n                    <Save className=\"w-4 h-4\" />\n                    {(createMutation.isPending || updateMutation.isPending) \n                      ? \"Salvando...\" \n                      : company \n                        ? \"Salvar Alterações\" \n                        : \"✓ Completar Configuração Obrigatória\"\n                    }\n                  </Button>\n                </div>\n              </form>\n            ) : (\n              /* Display Mode */\n              <div className=\"space-y-6\">\n                {/* Company Info Display */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-base font-medium\">Nome da Empresa</Label>\n                      <p className=\"text-lg text-foreground mt-1\" data-testid=\"text-company-name-display\">\n                        {company.name}\n                      </p>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-base font-medium\">Status da Assinatura</Label>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <div className={`w-2 h-2 rounded-full ${\n                          company.subscriptionStatus === 'active' ? 'bg-green-500' : 'bg-red-500'\n                        }`} />\n                        <span className=\"text-base\" data-testid=\"text-subscription-status-display\">\n                          {company.subscriptionStatus === 'active' ? 'Ativo' : 'Inativo'}\n                        </span>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-base font-medium\">Criada em</Label>\n                      <p className=\"text-base text-muted-foreground mt-1\" data-testid=\"text-company-created-date\">\n                        {new Date(company.createdAt!).toLocaleDateString('pt-BR')}\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Company Logo Display */}\n                  <div className=\"space-y-4\">\n                    <Label className=\"text-base font-medium\">Logo da Empresa</Label>\n                    {company.logoUrl ? (\n                      <div className=\"w-32 h-32 bg-muted rounded-lg flex items-center justify-center border\">\n                        <img \n                          src={company.logoUrl} \n                          alt=\"Logo da empresa\"\n                          className=\"w-30 h-30 object-contain rounded\"\n                          onError={(e) => {\n                            (e.target as HTMLImageElement).style.display = 'none';\n                            (e.target as HTMLImageElement).parentElement!.innerHTML = \n                              '<div class=\"text-center p-4\"><Building class=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" /><p class=\"text-sm text-muted-foreground\">Logo não disponível</p></div>';\n                          }}\n                          data-testid=\"img-company-logo-display\"\n                        />\n                      </div>\n                    ) : (\n                      <div className=\"w-32 h-32 bg-muted rounded-lg flex items-center justify-center border\" data-testid=\"placeholder-company-logo\">\n                        <div className=\"text-center\">\n                          <Building className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                          <p className=\"text-sm text-muted-foreground\">Sem logo</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Quick Actions */}\n                <div className=\"pt-6 border-t\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <Link href=\"/quotes\">\n                      <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-manage-quotes\">\n                        <FileText className=\"w-4 h-4 mr-2\" />\n                        Gerenciar Orçamentos\n                      </Button>\n                    </Link>\n                    <Link href=\"/subscription\">\n                      <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-manage-subscription\">\n                        <Building className=\"w-4 h-4 mr-2\" />\n                        Gerenciar Assinatura\n                      </Button>\n                    </Link>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full justify-start\"\n                      onClick={() => setIsEditing(true)}\n                      data-testid=\"button-edit-company-info\"\n                    >\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Editar Informações\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Help Card */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-3\">Dicas importantes</h3>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• Configure sua empresa antes de criar orçamentos</li>\n              <li>• O logo será exibido nos PDFs dos orçamentos gerados</li>\n              <li>• Certifique-se de que a URL do logo seja pública e acessível</li>\n              <li>• Formatos recomendados para logo: PNG, JPG ou SVG</li>\n              <li>• A assinatura ativa é necessária para usar todas as funcionalidades</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17420},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  FileText, \n  DollarSign, \n  Clock, \n  TrendingUp,\n  Plus,\n  Building,\n  BarChart3,\n  CreditCard,\n  Crown,\n  LogOut\n} from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { User } from \"@/entities/User\";\nimport { Company } from \"@/entities/Company\";\nimport { QuoteDraft } from \"@/entities/QuoteDraft\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Link } from \"wouter\";\nimport type { User as UserType } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: user } = useQuery<UserType>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    enabled: isAuthenticated,\n  });\n\n  const { data: company } = useQuery({\n    queryKey: [\"companies\", \"me\"],\n    queryFn: () => Company.me(),\n    retry: false,\n    enabled: isAuthenticated,\n  });\n\n  const { data: quotes = [], error: quotesError } = useQuery({\n    queryKey: [\"quotes\"],\n    queryFn: () => QuoteDraft.list(),\n    retry: false,\n    enabled: isAuthenticated,\n  });\n\n  // Handle quotes error\n  useEffect(() => {\n    if (quotesError && isUnauthorizedError(quotesError as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [quotesError, toast]);\n\n  // Force company setup if not completed\n  useEffect(() => {\n    if (user && isAuthenticated && !company && !isLoading) {\n      // Check if email is missing\n      if (!user.email) {\n        toast({\n          title: \"Email Obrigatório\",\n          description: \"Um email válido é necessário para usar a plataforma. Entre em contato com o suporte.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // Redirect to company setup if company is not configured\n      setTimeout(() => {\n        toast({\n          title: \"Configure sua Empresa\",\n          description: \"Complete a configuração da sua empresa para continuar usando a plataforma.\",\n          variant: \"default\",\n        });\n        window.location.href = \"/company\";\n      }, 2000);\n    }\n  }, [user, company, isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  // Calculate stats\n  const stats = {\n    totalQuotes: quotes.length,\n    totalRevenue: quotes\n      .filter(q => q.status === 'finalized')\n      .reduce((sum, q) => sum + parseFloat(q.total || '0'), 0),\n    pendingQuotes: quotes.filter(q => q.status === 'draft').length,\n    conversionRate: quotes.length > 0 \n      ? Math.round((quotes.filter(q => q.status === 'finalized').length / quotes.length) * 100)\n      : 0\n  };\n\n  const recentQuotes = quotes.slice(0, 3);\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case 'finalized': return 'default';\n      case 'draft': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'finalized': return 'text-green-700 bg-green-50 border-green-200';\n      case 'draft': return 'text-orange-700 bg-orange-50 border-orange-200';\n      default: return 'text-blue-700 bg-blue-50 border-blue-200';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'finalized': return 'Finalizado';\n      case 'draft': return 'Rascunho';\n      default: return status;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      {/* Sidebar */}\n      <aside className=\"w-64 bg-card border-r border-border flex flex-col shadow-sm\">\n        {/* Logo Section */}\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <FileText className=\"text-primary-foreground text-sm\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-foreground\" data-testid=\"text-app-name\">QuoteMaster</h1>\n              <p className=\"text-xs text-muted-foreground\">Pro</p>\n            </div>\n          </div>\n        </div>\n        \n        {/* User Info */}\n        <div className=\"p-4 border-b border-border bg-muted/30\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-primary-foreground text-sm font-medium\" data-testid=\"text-user-initials\">\n                {user?.firstName?.[0]}{user?.lastName?.[0]}\n              </span>\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-foreground truncate\" data-testid=\"text-user-name\">\n                {user?.firstName} {user?.lastName}\n              </p>\n              <p className=\"text-xs text-muted-foreground truncate\" data-testid=\"text-user-email\">{user?.email}</p>\n            </div>\n            {user?.role === 'admin' && (\n              <Crown className=\"text-yellow-500 text-xs\" data-testid=\"icon-admin-crown\" />\n            )}\n          </div>\n        </div>\n        \n        {/* Navigation */}\n        <nav className=\"flex-1 p-4 space-y-2\">\n          <div className=\"flex items-center gap-3 px-3 py-2 rounded-md bg-primary text-primary-foreground font-medium\" data-testid=\"nav-dashboard-active\">\n            <BarChart3 className=\"w-4 h-4\" />\n            <span>Dashboard</span>\n          </div>\n          <Link href=\"/quotes\">\n            <a className=\"flex items-center gap-3 px-3 py-2 rounded-md text-muted-foreground hover:text-foreground hover:bg-accent transition-colors\" data-testid=\"link-quotes\">\n              <FileText className=\"w-4 h-4\" />\n              <span>Orçamentos</span>\n            </a>\n          </Link>\n          <Link href=\"/company\">\n            <a className=\"flex items-center gap-3 px-3 py-2 rounded-md text-muted-foreground hover:text-foreground hover:bg-accent transition-colors\" data-testid=\"link-company\">\n              <Building className=\"w-4 h-4\" />\n              <span>Empresa</span>\n            </a>\n          </Link>\n          <Link href=\"/subscription\">\n            <a className=\"flex items-center gap-3 px-3 py-2 rounded-md text-muted-foreground hover:text-foreground hover:bg-accent transition-colors\" data-testid=\"link-subscription\">\n              <CreditCard className=\"w-4 h-4\" />\n              <span>Assinatura</span>\n            </a>\n          </Link>\n          {user?.role === 'admin' && (\n            <Link href=\"/admin\">\n              <a className=\"flex items-center gap-3 px-3 py-2 rounded-md text-muted-foreground hover:text-foreground hover:bg-accent transition-colors\" data-testid=\"link-admin\">\n                <Crown className=\"w-4 h-4\" />\n                <span>Admin Panel</span>\n              </a>\n            </Link>\n          )}\n        </nav>\n        \n        {/* Footer */}\n        <div className=\"p-4 border-t border-border\">\n          <button \n            onClick={() => window.location.href = '/api/logout'}\n            className=\"flex items-center gap-3 px-3 py-2 rounded-md text-muted-foreground hover:text-foreground hover:bg-accent transition-colors w-full text-left\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n            <span>Sair</span>\n          </button>\n        </div>\n      </aside>\n      \n      {/* Main Content */}\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4 flex items-center justify-between shadow-sm\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"heading-dashboard\">Dashboard</h2>\n            <p className=\"text-muted-foreground\">Visão geral da sua conta e atividades</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <div className={`flex items-center gap-2 px-3 py-1 rounded-full border ${\n              company?.subscriptionStatus === 'active' \n                ? 'bg-green-50 text-green-700 border-green-200'\n                : 'bg-red-50 text-red-700 border-red-200'\n            }`} data-testid=\"badge-subscription-status\">\n              <div className={`w-2 h-2 rounded-full ${\n                company?.subscriptionStatus === 'active' ? 'bg-green-500' : 'bg-red-500'\n              }`} />\n              <span className=\"text-sm font-medium\">\n                {company?.subscriptionStatus === 'active' ? 'Ativo' : 'Inativo'}\n              </span>\n            </div>\n            <Link href=\"/quotes/new\">\n              <Button className=\"flex items-center gap-2\" data-testid=\"button-new-quote\">\n                <Plus className=\"w-4 h-4\" />\n                Novo Orçamento\n              </Button>\n            </Link>\n          </div>\n        </header>\n        \n        {/* Content Area */}\n        <div className=\"flex-1 overflow-y-auto p-6 space-y-6\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total de Orçamentos</p>\n                    <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"stat-total-quotes\">\n                      {stats.totalQuotes}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-blue-50 rounded-lg\">\n                    <FileText className=\"text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"border-0 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Valor Total</p>\n                    <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"stat-total-revenue\">\n                      R$ {stats.totalRevenue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-green-50 rounded-lg\">\n                    <DollarSign className=\"text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"border-0 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Pendentes</p>\n                    <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"stat-pending-quotes\">\n                      {stats.pendingQuotes}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-orange-50 rounded-lg\">\n                    <Clock className=\"text-orange-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"border-0 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Taxa de Conversão</p>\n                    <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"stat-conversion-rate\">\n                      {stats.conversionRate}%\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-purple-50 rounded-lg\">\n                    <TrendingUp className=\"text-purple-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Recent Activity and Quick Actions */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Recent Quotes */}\n            <div className=\"lg:col-span-2 bg-card border border-border rounded-lg shadow-sm\">\n              <div className=\"p-6 border-b border-border\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">Orçamentos Recentes</h3>\n                  <Link href=\"/quotes\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-all-quotes\">\n                      Ver todos\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n              <div className=\"p-0\">\n                {recentQuotes.length === 0 ? (\n                  <div className=\"p-8 text-center\">\n                    <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\" data-testid=\"text-no-quotes\">Nenhum orçamento encontrado</p>\n                    <Link href=\"/quotes/new\">\n                      <Button variant=\"outline\" className=\"mt-4\" data-testid=\"button-create-first-quote\">\n                        Criar primeiro orçamento\n                      </Button>\n                    </Link>\n                  </div>\n                ) : (\n                  recentQuotes.map((quote) => (\n                    <div key={quote.id} className=\"flex items-center justify-between p-4 border-b border-border last:border-b-0 hover:bg-muted/50 transition-colors\" data-testid={`quote-${quote.id}`}>\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          <FileText className=\"text-primary text-sm\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-foreground\" data-testid={`quote-title-${quote.id}`}>\n                            {quote.title}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`quote-client-${quote.id}`}>\n                            {quote.clientName || 'Cliente não informado'}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-foreground\" data-testid={`quote-total-${quote.id}`}>\n                          R$ {parseFloat(quote.total || '0').toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                        </p>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <span className={`px-2 py-1 rounded-full text-xs border ${getStatusColor(quote.status || 'draft')}`} data-testid={`quote-status-${quote.id}`}>\n                            {getStatusText(quote.status || 'draft')}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n            \n            {/* Quick Actions & Account Status */}\n            <div className=\"space-y-6\">\n              {/* Quick Actions */}\n              <Card className=\"border-0 shadow-sm\">\n                <div className=\"p-6 border-b border-border\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">Ações Rápidas</h3>\n                </div>\n                <div className=\"p-6 space-y-4\">\n                  <Link href=\"/quotes/new\">\n                    <button className=\"w-full flex items-center gap-3 p-3 rounded-lg border border-border hover:bg-muted/50 transition-colors text-left\" data-testid=\"button-quick-create-quote\">\n                      <div className=\"w-8 h-8 bg-blue-50 rounded-lg flex items-center justify-center\">\n                        <Plus className=\"text-blue-600 text-sm\" />\n                      </div>\n                      <span className=\"font-medium text-foreground\">Criar Orçamento</span>\n                    </button>\n                  </Link>\n                  \n                  <Link href=\"/company\">\n                    <button className=\"w-full flex items-center gap-3 p-3 rounded-lg border border-border hover:bg-muted/50 transition-colors text-left\" data-testid=\"button-quick-manage-company\">\n                      <div className=\"w-8 h-8 bg-green-50 rounded-lg flex items-center justify-center\">\n                        <Building className=\"text-green-600 text-sm\" />\n                      </div>\n                      <span className=\"font-medium text-foreground\">Configurar Empresa</span>\n                    </button>\n                  </Link>\n                  \n                  <Link href=\"/quotes\">\n                    <button className=\"w-full flex items-center gap-3 p-3 rounded-lg border border-border hover:bg-muted/50 transition-colors text-left\" data-testid=\"button-quick-view-reports\">\n                      <div className=\"w-8 h-8 bg-purple-50 rounded-lg flex items-center justify-center\">\n                        <BarChart3 className=\"text-purple-600 text-sm\" />\n                      </div>\n                      <span className=\"font-medium text-foreground\">Ver Relatórios</span>\n                    </button>\n                  </Link>\n                </div>\n              </Card>\n              \n              {/* Account Status */}\n              <Card className=\"border-0 shadow-sm\">\n                <div className=\"p-6 border-b border-border\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">Status da Conta</h3>\n                </div>\n                <div className=\"p-6 space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Plano</span>\n                    <span className=\"font-medium text-foreground\" data-testid=\"text-plan\">QuoteMaster Pro</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Status</span>\n                    <span className=\"flex items-center gap-2\">\n                      <div className={`w-2 h-2 rounded-full ${\n                        company?.subscriptionStatus === 'active' ? 'bg-green-500' : 'bg-red-500'\n                      }`} />\n                      <span className={`text-sm font-medium ${\n                        company?.subscriptionStatus === 'active' ? 'text-green-700' : 'text-red-700'\n                      }`} data-testid=\"text-subscription-status\">\n                        {company?.subscriptionStatus === 'active' ? 'Ativo' : 'Inativo'}\n                      </span>\n                    </span>\n                  </div>\n                  <div className=\"pt-4 border-t border-border\">\n                    <Link href=\"/subscription\">\n                      <Button className=\"w-full\" data-testid=\"button-manage-subscription\">\n                        Gerenciar Assinatura\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":20366},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Building, CreditCard, Users, CheckCircle, Quote } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n      {/* Hero Section */}\n      <div className=\"container mx-auto px-6 py-16\">\n        <div className=\"text-center mb-16\">\n          <div className=\"w-16 h-16 bg-primary rounded-2xl mx-auto mb-6 flex items-center justify-center shadow-xl\">\n            <Quote className=\"w-8 h-8 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-5xl font-bold text-foreground mb-6\" data-testid=\"heading-main\">\n            QuoteMaster Pro\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            A plataforma completa para gestão de orçamentos profissionais. \n            Crie, gerencie e acompanhe seus orçamentos com facilidade e elegância.\n          </p>\n          <div className=\"flex gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              className=\"bg-primary hover:bg-primary/90\"\n              onClick={() => window.location.href = '/api/login'}\n              data-testid=\"button-login\"\n            >\n              Entrar na Plataforma\n            </Button>\n          </div>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n          <Card className=\"border-0 shadow-lg hover:shadow-xl transition-shadow\" data-testid=\"card-quotes\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center mb-4\">\n                <FileText className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <CardTitle className=\"text-xl\">Gestão de Orçamentos</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                Crie orçamentos profissionais com múltiplos templates, \n                calcule automaticamente totais e descontos.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-lg hover:shadow-xl transition-shadow\" data-testid=\"card-company\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center mb-4\">\n                <Building className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <CardTitle className=\"text-xl\">Multi-Empresa</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                Configure sua empresa com logo personalizado e \n                mantenha dados isolados e seguros.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-lg hover:shadow-xl transition-shadow\" data-testid=\"card-subscription\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center mb-4\">\n                <CreditCard className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <CardTitle className=\"text-xl\">Assinatura Flexível</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                Pagamento via Stripe com portal do cliente \n                para gerenciar sua assinatura facilmente.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Features List */}\n        <div className=\"bg-card rounded-2xl shadow-xl p-8 mb-16\">\n          <h2 className=\"text-3xl font-bold text-center text-foreground mb-12\" data-testid=\"heading-features\">\n            Recursos Principais\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <span className=\"text-foreground\">5 templates de orçamento profissionais</span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <span className=\"text-foreground\">Geração automática de PDF</span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <span className=\"text-foreground\">Cálculo automático de totais</span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <span className=\"text-foreground\">Sistema de descontos avançado</span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <span className=\"text-foreground\">Gestão multi-usuário</span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <span className=\"text-foreground\">Dashboard administrativo</span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <span className=\"text-foreground\">Isolamento completo de dados</span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <span className=\"text-foreground\">Suporte a múltiplas moedas</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-6\" data-testid=\"heading-cta\">\n            Pronto para começar?\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Junte-se a centenas de empresas que já usam o QuoteMaster Pro\n          </p>\n          <Button \n            size=\"lg\" \n            className=\"bg-primary hover:bg-primary/90 px-8 py-4 text-lg\"\n            onClick={() => window.location.href = '/api/login'}\n            data-testid=\"button-cta-login\"\n          >\n            Começar Agora - É Grátis\n          </Button>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border bg-card/50\">\n        <div className=\"container mx-auto px-6 py-8\">\n          <div className=\"text-center text-muted-foreground\">\n            <p>&copy; 2024 QuoteMaster Pro. Sistema profissional de gestão de orçamentos.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":6829},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/quote-editor.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { ArrowLeft, Save, FileText, Eye } from \"lucide-react\";\nimport { Link, useLocation, useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { QuoteDraft } from \"@/entities/QuoteDraft\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport QuoteHeader from \"@/components/QuoteHeader\";\nimport ItemsList from \"@/components/ItemsList\";\nimport TemplateSelector from \"@/components/TemplateSelector\";\nimport QuoteSummary from \"@/components/QuoteSummary\";\nimport { generateQuotePDF } from \"@/lib/pdfGenerator\";\n\ninterface QuoteData {\n  code: string;\n  title: string;\n  client_name: string;\n  client_email: string;\n  items: Array<{\n    description: string;\n    unit_price: number;\n    needed_quantity: number;\n    owned_quantity: number;\n    buy_quantity: number;\n    total: number;\n  }>;\n  discount: number;\n  template_variant: string;\n  note: string;\n  status: string;\n}\n\nexport default function QuoteEditor() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const isEdit = !!params.id;\n\n  const [quoteData, setQuoteData] = useState<QuoteData>({\n    code: '',\n    title: '',\n    client_name: '',\n    client_email: '',\n    items: [],\n    discount: 0,\n    template_variant: 'variant_a',\n    note: '',\n    status: 'draft'\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Acesso Negado\",\n        description: \"Você precisa estar logado. Redirecionando...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Load existing quote if editing\n  const { isLoading: quoteLoading } = useQuery({\n    queryKey: [\"quote\", params.id],\n    queryFn: async () => {\n      if (!params.id) return null;\n      const quote = await QuoteDraft.get(params.id);\n      if (quote) {\n        setQuoteData({\n          code: quote.code,\n          title: quote.title,\n          client_name: quote.clientName || '',\n          client_email: quote.clientEmail || '',\n          items: (quote.items || []).map((item: any) => ({\n            description: item.description || '',\n            unit_price: parseFloat(item.unitPrice) || 0,\n            needed_quantity: parseInt(item.neededQuantity) || 0,\n            owned_quantity: parseInt(item.ownedQuantity || '0') || 0,\n            buy_quantity: parseInt(item.buyQuantity || '0') || 0,\n            total: parseFloat(item.total) || 0\n          })),\n          discount: parseFloat(quote.discount || '0') || 0,\n          template_variant: quote.templateVariant || 'variant_a',\n          note: quote.note || '',\n          status: quote.status || 'draft'\n        });\n      }\n      return quote;\n    },\n    enabled: isAuthenticated && isEdit,\n    retry: false,\n  });\n\n  // Save mutation\n  const saveMutation = useMutation({\n    mutationFn: async (data: QuoteData) => {\n      const saveData = {\n        title: data.title,\n        clientName: data.client_name,\n        clientEmail: data.client_email,\n        items: data.items,\n        discount: data.discount.toString(),\n        templateVariant: data.template_variant,\n        note: data.note,\n        status: data.status,\n        subtotal: data.items.reduce((sum, item) => sum + (item.total || 0), 0).toString(),\n        total: (data.items.reduce((sum, item) => sum + (item.total || 0), 0) - \n               (data.items.reduce((sum, item) => sum + (item.total || 0), 0) * (data.discount || 0)) / 100).toString()\n      };\n\n      if (isEdit) {\n        return await QuoteDraft.update(params.id!, saveData);\n      } else {\n        return await QuoteDraft.create(saveData);\n      }\n    },\n    onSuccess: (newQuote) => {\n      queryClient.invalidateQueries({ queryKey: [\"quotes\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: `Orçamento ${isEdit ? 'atualizado' : 'criado'} com sucesso.`,\n      });\n      \n      if (!isEdit) {\n        setLocation(`/quote-editor/${newQuote.id}`);\n      }\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Acesso Negado\",\n          description: \"Você foi desconectado. Redirecionando...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erro\",\n        description: `Erro ao ${isEdit ? 'atualizar' : 'criar'} orçamento.`,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // PDF generation mutation\n  const pdfMutation = useMutation({\n    mutationFn: async () => {\n      return await generateQuotePDF(quoteData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"PDF Gerado\",\n        description: \"O PDF do orçamento foi gerado com sucesso!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao gerar PDF do orçamento.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSave = () => {\n    if (!quoteData.title.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"O título do orçamento é obrigatório.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    saveMutation.mutate(quoteData);\n  };\n\n  const handleGeneratePDF = () => {\n    if (!quoteData.title.trim()) {\n      toast({\n        title: \"Erro\", \n        description: \"Salve o orçamento antes de gerar o PDF.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    pdfMutation.mutate();\n  };\n\n  if (isLoading || quoteLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/quotes\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back-quotes\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Voltar\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"heading-quote-editor\">\n                {isEdit ? 'Editar Orçamento' : 'Novo Orçamento'}\n              </h1>\n              {quoteData.code && (\n                <p className=\"text-sm text-muted-foreground\">Código: {quoteData.code}</p>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button \n              variant=\"outline\" \n              onClick={handleGeneratePDF}\n              disabled={pdfMutation.isPending || !quoteData.title}\n              data-testid=\"button-generate-pdf\"\n            >\n              <Eye className=\"w-4 h-4 mr-2\" />\n              {pdfMutation.isPending ? \"Gerando...\" : \"Visualizar PDF\"}\n            </Button>\n            <Button \n              onClick={handleSave}\n              disabled={saveMutation.isPending}\n              data-testid=\"button-save-quote\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {saveMutation.isPending ? \"Salvando...\" : \"Salvar\"}\n            </Button>\n          </div>\n        </div>\n\n        {/* Quote Header */}\n        <QuoteHeader \n          quote={quoteData} \n          onChange={setQuoteData}\n        />\n\n        {/* Template Selector */}\n        <TemplateSelector \n          selectedVariant={quoteData.template_variant} \n          onChange={(variant) => setQuoteData(prev => ({ ...prev, template_variant: variant }))}\n        />\n\n        {/* Items List */}\n        <ItemsList \n          items={quoteData.items} \n          onChange={(items) => setQuoteData(prev => ({ ...prev, items }))}\n        />\n\n        {/* Quote Summary and Notes */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <QuoteSummary \n            items={quoteData.items}\n            discount={quoteData.discount}\n            onDiscountChange={(discount) => setQuoteData(prev => ({ ...prev, discount }))}\n          />\n          \n          {/* Notes Section */}\n          <Card className=\"border-0 shadow-lg\">\n            <CardHeader className=\"border-b border-gray-100\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"w-5 h-5 text-blue-600\" />\n                Observações\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"note\">Observações Adicionais</Label>\n                <Textarea\n                  id=\"note\"\n                  value={quoteData.note}\n                  onChange={(e) => setQuoteData(prev => ({ ...prev, note: e.target.value }))}\n                  placeholder=\"Adicione observações, termos ou condições especiais...\"\n                  rows={8}\n                  className=\"resize-none\"\n                  data-testid=\"textarea-quote-note\"\n                />\n                <p className=\"text-xs text-gray-500\">\n                  As observações aparecerão no PDF final do orçamento.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Bottom Actions */}\n        <div className=\"flex justify-end gap-3 pt-6 border-t\">\n          <Link href=\"/quotes\">\n            <Button variant=\"outline\" data-testid=\"button-cancel-edit\">\n              Cancelar\n            </Button>\n          </Link>\n          <Button \n            onClick={handleSave}\n            disabled={saveMutation.isPending}\n            data-testid=\"button-save-final\"\n          >\n            <Save className=\"w-4 h-4 mr-2\" />\n            {saveMutation.isPending ? \"Salvando...\" : \"Salvar Orçamento\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10599},"client/src/pages/quotes.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { \n  FileText, \n  Plus, \n  Edit,\n  Trash2,\n  Eye,\n  Download,\n  Search\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { QuoteDraft } from \"@/entities/QuoteDraft\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertQuoteDraftSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Link } from \"wouter\";\n\nconst createQuoteSchema = insertQuoteDraftSchema.extend({\n  title: z.string().min(1, \"Título é obrigatório\"),\n  clientName: z.string().optional(),\n  clientEmail: z.string().email(\"Email inválido\").optional().or(z.literal(\"\")),\n});\n\ntype CreateQuoteForm = z.infer<typeof createQuoteSchema>;\n\nexport default function Quotes() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: quotes = [], isLoading: quotesLoading, error: quotesError } = useQuery({\n    queryKey: [\"quotes\"],\n    queryFn: () => QuoteDraft.list(),\n    retry: false,\n    enabled: isAuthenticated,\n  });\n\n  // Handle quotes error\n  useEffect(() => {\n    if (quotesError && isUnauthorizedError(quotesError as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [quotesError, toast]);\n\n  const form = useForm<CreateQuoteForm>({\n    resolver: zodResolver(createQuoteSchema),\n    defaultValues: {\n      title: \"\",\n      clientName: \"\",\n      clientEmail: \"\",\n      templateVariant: \"variant_a\",\n      currency: \"BRL\",\n      status: \"draft\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: Omit<CreateQuoteForm, 'code' | 'companyId' | 'createdBy'>) => QuoteDraft.create(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"quotes\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Orçamento criado com sucesso!\",\n      });\n      setIsCreateModalOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao criar orçamento. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (quoteId: string) => QuoteDraft.delete(quoteId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"quotes\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Orçamento excluído com sucesso!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao excluir orçamento. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateSubmit = (data: CreateQuoteForm) => {\n    createMutation.mutate(data);\n  };\n\n  const handleDelete = (quoteId: string) => {\n    if (confirm(\"Tem certeza que deseja excluir este orçamento?\")) {\n      deleteMutation.mutate(quoteId);\n    }\n  };\n\n  // Filter quotes\n  const filteredQuotes = quotes.filter(quote => {\n    const matchesSearch = quote.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (quote.clientName && quote.clientName.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesStatus = filterStatus === \"all\" || quote.status === filterStatus;\n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case 'finalized': return 'default';\n      case 'draft': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'finalized': return 'Finalizado';\n      case 'draft': return 'Rascunho';\n      default: return status;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"heading-quotes\">Orçamentos</h1>\n            <p className=\"text-muted-foreground\">Gerencie todos os seus orçamentos</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" data-testid=\"button-back-dashboard\">Dashboard</Button>\n            </Link>\n            <div className=\"flex items-center gap-2\">\n              <Link href=\"/quote-editor\">\n                <Button data-testid=\"button-new-advanced-quote\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Editor Avançado\n                </Button>\n              </Link>\n              <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" data-testid=\"button-new-quote\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Criação Rápida\n                  </Button>\n                </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle data-testid=\"dialog-title-create-quote\">Criar Novo Orçamento</DialogTitle>\n                  <DialogDescription>\n                    Preencha os dados básicos para criar um novo orçamento\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={form.handleSubmit(handleCreateSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"title\">Título do Orçamento *</Label>\n                      <Input\n                        id=\"title\"\n                        placeholder=\"Ex: Sistema de Segurança\"\n                        {...form.register(\"title\")}\n                        data-testid=\"input-quote-title\"\n                      />\n                      {form.formState.errors.title && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {form.formState.errors.title.message}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"clientName\">Nome do Cliente</Label>\n                      <Input\n                        id=\"clientName\"\n                        placeholder=\"Nome do cliente\"\n                        {...form.register(\"clientName\")}\n                        data-testid=\"input-client-name\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"clientEmail\">Email do Cliente</Label>\n                      <Input\n                        id=\"clientEmail\"\n                        type=\"email\"\n                        placeholder=\"cliente@empresa.com\"\n                        {...form.register(\"clientEmail\")}\n                        data-testid=\"input-client-email\"\n                      />\n                      {form.formState.errors.clientEmail && (\n                        <p className=\"text-sm text-destructive mt-1\">\n                          {form.formState.errors.clientEmail.message}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"templateVariant\">Template</Label>\n                      <Select\n                        value={form.watch(\"templateVariant\") || \"\"}\n                        onValueChange={(value) => form.setValue(\"templateVariant\", value || \"variant_a\")}\n                      >\n                        <SelectTrigger data-testid=\"select-template-variant\">\n                          <SelectValue placeholder=\"Selecione um template\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"variant_a\">Template A - Clássico</SelectItem>\n                          <SelectItem value=\"variant_b\">Template B - Moderno</SelectItem>\n                          <SelectItem value=\"variant_c\">Template C - Minimalista</SelectItem>\n                          <SelectItem value=\"variant_d\">Template D - Corporativo</SelectItem>\n                          <SelectItem value=\"variant_e\">Template E - Elegante</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"note\">Observações</Label>\n                    <Textarea\n                      id=\"note\"\n                      placeholder=\"Observações adicionais...\"\n                      rows={3}\n                      {...form.register(\"note\")}\n                      data-testid=\"textarea-quote-note\"\n                    />\n                  </div>\n\n                  <DialogFooter>\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateModalOpen(false)} data-testid=\"button-cancel-create\">\n                      Cancelar\n                    </Button>\n                    <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-submit-create\">\n                      {createMutation.isPending ? \"Criando...\" : \"Criar Orçamento\"}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </DialogContent>\n            </Dialog>\n            </div>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Buscar por título ou cliente...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-quotes\"\n                  />\n                </div>\n              </div>\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger className=\"w-full md:w-48\" data-testid=\"select-filter-status\">\n                  <SelectValue placeholder=\"Filtrar por status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os status</SelectItem>\n                  <SelectItem value=\"draft\">Rascunho</SelectItem>\n                  <SelectItem value=\"finalized\">Finalizado</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quotes Grid */}\n        {quotesLoading ? (\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\" />\n          </div>\n        ) : filteredQuotes.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <FileText className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\" data-testid=\"heading-no-quotes\">\n                {quotes.length === 0 ? \"Nenhum orçamento encontrado\" : \"Nenhum resultado encontrado\"}\n              </h3>\n              <p className=\"text-muted-foreground mb-6\">\n                {quotes.length === 0 \n                  ? \"Você ainda não criou nenhum orçamento. Que tal começar criando seu primeiro?\"\n                  : \"Tente ajustar os filtros ou termo de busca.\"\n                }\n              </p>\n              {quotes.length === 0 && (\n                <Button onClick={() => setIsCreateModalOpen(true)} data-testid=\"button-create-first-quote\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Criar Primeiro Orçamento\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredQuotes.map((quote) => (\n              <Card key={quote.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`quote-card-${quote.id}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1 min-w-0\">\n                      <CardTitle className=\"text-lg truncate\" data-testid={`quote-title-${quote.id}`}>\n                        {quote.title}\n                      </CardTitle>\n                      <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`quote-code-${quote.id}`}>\n                        {quote.code}\n                      </p>\n                    </div>\n                    <Badge variant={getStatusVariant(quote.status || 'draft')} data-testid={`quote-status-${quote.id}`}>\n                      {getStatusText(quote.status || 'draft')}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div>\n                    <p className=\"text-sm font-medium text-foreground\" data-testid={`quote-client-${quote.id}`}>\n                      {quote.clientName || \"Cliente não informado\"}\n                    </p>\n                    {quote.clientEmail && (\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`quote-client-email-${quote.id}`}>\n                        {quote.clientEmail}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between pt-2 border-t\">\n                    <div>\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid={`quote-total-${quote.id}`}>\n                        R$ {parseFloat(quote.total || '0').toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => window.open(`/quotes/${quote.id}`, '_blank')}\n                        data-testid={`button-view-quote-${quote.id}`}\n                      >\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => window.open(`/quotes/${quote.id}/edit`, '_blank')}\n                        data-testid={`button-edit-quote-${quote.id}`}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleDelete(quote.id)}\n                        disabled={deleteMutation.isPending}\n                        data-testid={`button-delete-quote-${quote.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":18009},"client/src/pages/subscription.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  CreditCard, \n  CheckCircle, \n  XCircle,\n  Crown,\n  ExternalLink,\n  Loader2\n} from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { User } from \"@/entities/User\";\nimport { Company } from \"@/entities/Company\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, PaymentElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { Link } from \"wouter\";\n\n// Load Stripe\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst SubscriptionForm = ({ clientSecret, onSuccess }: { clientSecret: string, onSuccess: () => void }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: window.location.origin + '/subscription',\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Erro no Pagamento\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Pagamento Bem-sucedido\",\n        description: \"Sua assinatura foi ativada com sucesso!\",\n      });\n      onSuccess();\n    }\n\n    setIsProcessing(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        className=\"w-full\" \n        disabled={!stripe || isProcessing}\n        data-testid=\"button-submit-payment\"\n      >\n        {isProcessing ? (\n          <>\n            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n            Processando...\n          </>\n        ) : (\n          'Confirmar Assinatura'\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default function Subscription() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [showPaymentForm, setShowPaymentForm] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    enabled: isAuthenticated,\n  });\n\n  const { data: company, refetch: refetchCompany, error: companyError } = useQuery({\n    queryKey: [\"companies\", \"me\"],\n    queryFn: () => Company.me(),\n    retry: false,\n    enabled: isAuthenticated,\n  });\n\n  // Handle company error\n  useEffect(() => {\n    if (companyError && isUnauthorizedError(companyError as Error)) {\n      toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n    }\n  }, [companyError, toast]);\n\n  const subscriptionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/get-or-create-subscription\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.clientSecret) {\n        setClientSecret(data.clientSecret);\n        setShowPaymentForm(true);\n      }\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao criar assinatura. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const customerPortalMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/create-customer-portal\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.portal_url) {\n        window.location.href = data.portal_url;\n      }\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao abrir portal do cliente. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStartSubscription = () => {\n    subscriptionMutation.mutate();\n  };\n\n  const handleManageSubscription = () => {\n    customerPortalMutation.mutate();\n  };\n\n  const handlePaymentSuccess = () => {\n    setShowPaymentForm(false);\n    setClientSecret(\"\");\n    refetchCompany();\n    toast({\n      title: \"Sucesso\",\n      description: \"Assinatura ativada com sucesso!\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  const isSubscriptionActive = company?.subscriptionStatus === 'active';\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground flex items-center gap-3\" data-testid=\"heading-subscription\">\n              <CreditCard className=\"w-8 h-8\" />\n              Gerenciar Assinatura\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Controle sua assinatura e métodos de pagamento\n            </p>\n          </div>\n          <Link href=\"/\">\n            <Button variant=\"outline\" data-testid=\"button-back-dashboard\">Dashboard</Button>\n          </Link>\n        </div>\n\n        {/* Subscription Status Card */}\n        <Card className=\"shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span className=\"flex items-center gap-2\">\n                <Crown className=\"w-5 h-5 text-yellow-500\" />\n                QuoteMaster Pro\n              </span>\n              <Badge \n                variant={isSubscriptionActive ? \"default\" : \"destructive\"}\n                data-testid=\"badge-subscription-status\"\n              >\n                {isSubscriptionActive ? (\n                  <>\n                    <CheckCircle className=\"w-4 h-4 mr-1\" />\n                    Ativo\n                  </>\n                ) : (\n                  <>\n                    <XCircle className=\"w-4 h-4 mr-1\" />\n                    Inativo\n                  </>\n                )}\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Plan Features */}\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-3\">Recursos inclusos:</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                  <span className=\"text-sm\">Orçamentos ilimitados</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                  <span className=\"text-sm\">5 templates profissionais</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                  <span className=\"text-sm\">Geração de PDF automática</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                  <span className=\"text-sm\">Logo personalizado</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                  <span className=\"text-sm\">Suporte prioritário</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                  <span className=\"text-sm\">Backups automáticos</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Current Status */}\n            <div className=\"border-t pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium text-foreground mb-2\">Status da Assinatura</h4>\n                  <p className={`text-lg font-semibold ${\n                    isSubscriptionActive ? 'text-green-600' : 'text-red-600'\n                  }`} data-testid=\"text-subscription-status\">\n                    {isSubscriptionActive ? 'Assinatura Ativa' : 'Assinatura Inativa'}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {isSubscriptionActive \n                      ? 'Você tem acesso completo a todas as funcionalidades.'\n                      : 'Ative sua assinatura para usar todas as funcionalidades.'\n                    }\n                  </p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium text-foreground mb-2\">Valor Mensal</h4>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-subscription-price\">\n                    R$ 30,00\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">por mês</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"border-t pt-6\">\n              {isSubscriptionActive ? (\n                <div className=\"flex gap-4\">\n                  <Button \n                    onClick={handleManageSubscription}\n                    disabled={customerPortalMutation.isPending}\n                    className=\"flex items-center gap-2\"\n                    data-testid=\"button-manage-subscription\"\n                  >\n                    {customerPortalMutation.isPending ? (\n                      <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    ) : (\n                      <ExternalLink className=\"w-4 h-4\" />\n                    )}\n                    Gerenciar no Portal do Cliente\n                  </Button>\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => window.open('mailto:suporte@quotemaster.pro', '_blank')}\n                    data-testid=\"button-contact-support\"\n                  >\n                    Contatar Suporte\n                  </Button>\n                </div>\n              ) : (\n                <Button \n                  onClick={handleStartSubscription}\n                  disabled={subscriptionMutation.isPending}\n                  size=\"lg\"\n                  className=\"w-full md:w-auto\"\n                  data-testid=\"button-start-subscription\"\n                >\n                  {subscriptionMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Preparando...\n                    </>\n                  ) : (\n                    'Ativar Assinatura - R$ 30,00/mês'\n                  )}\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Form */}\n        {showPaymentForm && clientSecret && (\n          <Card className=\"shadow-lg\">\n            <CardHeader>\n              <CardTitle>Finalizar Assinatura</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Elements stripe={stripePromise} options={{ clientSecret }}>\n                <SubscriptionForm \n                  clientSecret={clientSecret} \n                  onSuccess={handlePaymentSuccess}\n                />\n              </Elements>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Benefits Card */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">Por que escolher o QuoteMaster Pro?</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                  <CreditCard className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <h4 className=\"font-medium text-foreground mb-2\">Sem Taxas Extras</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Preço fixo mensal, sem surpresas ou custos adicionais.\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                  <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <h4 className=\"font-medium text-foreground mb-2\">Cancele Quando Quiser</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Sem fidelidade. Cancele sua assinatura a qualquer momento.\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                  <Crown className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <h4 className=\"font-medium text-foreground mb-2\">Suporte Prioritário</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Atendimento personalizado e suporte técnico especializado.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15218},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}